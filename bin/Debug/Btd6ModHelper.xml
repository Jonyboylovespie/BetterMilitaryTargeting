<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BloonsTD6 Mod Helper</name>
    </assembly>
    <members>
        <member name="T:BTD_Mod_Helper.AdvancedBloonsTD6Mod">
            <summary>
            A more advanced version of the BloonsTD6Mod Class that has postfixes and prefixes for all hooks, along with instances and all parameters for each patch
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreGetRoundHint(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame@,System.String@)">
            <summary>
            Called before the game shows a hint for a specific round
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.GetRoundHint
            </summary>
            <param name="inGame"></param>
            <param name="text">the text the hint will have, passed as a ref to allow changes</param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostGetRoundHint(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.String@)">
            <summary>
            called after the game shows a hint for a specific round
            <br/>
            Equivalent to a HarmonyPostfix on InGame.GetRoundHint
            </summary>
            <param name="inGame"></param>
            <param name="text">the text the hint will have, passed as a ref to allow changes</param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreIsParagonLocked(Il2CppAssets.Scripts.Simulation.Towers.TowerManager@,Il2CppAssets.Scripts.Simulation.Towers.Tower@,System.Boolean@)">
            <summary>
            Called before the game thinks a paragon is locked
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on TowerManager.IsParagonLocked
            </summary>
            <param name="tower"></param>
            <param name="result">The result of the method, since it returns a bool, different from what you return</param>
            <param name="towerManager"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostIsParagonLocked(Il2CppAssets.Scripts.Simulation.Towers.TowerManager,Il2CppAssets.Scripts.Simulation.Towers.Tower,System.Boolean@)">
            <summary>
            Called after the game thinks a paragon is locked
            <br/>
            Equivalent to a HarmonyPostfix on TowerManager.IsParagonLocked
            </summary>
            <param name="tower"></param>
            <param name="result">The result of the method, since it returns a bool, different from what you return</param>
            <param name="towerManager"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreOnVictory(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called before the a game is won
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.OnVictory
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreMatchEnd(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called before the player returns to the MainMenu from a match
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.Quit
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreRestart(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called before the game is restarted
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.Restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreMatchStart(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called before the game is started
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.Restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreSpriteLoaded(UnityEngine.U2D.SpriteAtlas@,System.String@,UnityEngine.Sprite@)">
            <summary>
            Called before a sprite is loaded from a SpriteAtlas
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on SpriteAtlas.GetSprite
            </summary>
            <param name="spriteAtlas"></param>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostSpriteLoaded(UnityEngine.U2D.SpriteAtlas,System.String,UnityEngine.Sprite@)">
            <summary>
            Called after a sprite is loaded from a SpriteAtlas
            <br/>
            Equivalent to a HarmonyPostfix on SpriteAtlas.GetSprite
            </summary>
            <param name="spriteAtlas"></param>
            <param name="name"></param>
            <param name="result"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreParagonDegreeMutatorLoaded(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.ParagonTower@,System.Single@,Il2CppAssets.Scripts.Models.Towers.Behaviors.ParagonTowerModel.PowerDegreeMutator@)">
            <summary>
            Called before the degree mutator for a paragon is loaded
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on ParagonTower.GetDegreeMutator
            </summary>
            <param name="paragonTower"></param>
            <param name="investment"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostParagonDegreeMutatorLoaded(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.ParagonTower,System.Single,Il2CppAssets.Scripts.Models.Towers.Behaviors.ParagonTowerModel.PowerDegreeMutator@)">
            <summary>
            Called after the degree mutator for a paragon is loaded
            <br/>
            Equivalent to a HarmonyPostfix on ParagonTower.GetDegreeMutator
            </summary>
            <param name="paragonTower"></param>
            <param name="investment"></param>
            <param name="result"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreParagonDegreeUpdated(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.ParagonTower@)">
            <summary>
            Called before the degree for a paragon is changed
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on ParagonTower.UpdateDegree
            </summary>
            <param name="paragonTower"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostParagonDegreeUpdated(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.ParagonTower)">
            <summary>
            Called after the degree for a paragon is changed
            <br/>
            Equivalent to a HarmonyPostfix on ParagonTower.UpdateDegree
            </summary>
            <param name="paragonTower"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreTowerSold(Il2CppAssets.Scripts.Simulation.Towers.Tower@,System.Single@)">
            <summary>
            Called before a tower is sold
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Tower.OnSold
            </summary>
            <param name="tower"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreTowerUpgraded(Il2CppAssets.Scripts.Simulation.Towers.Tower@,System.String,Il2CppAssets.Scripts.Models.Towers.TowerModel@)">
            <summary>
            Called before a tower is upgraded
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on TowerManager.UpgradeTower
            </summary>
            <param name="tower"></param>
            <param name="upgradeName"></param>
            <param name="newBaseTowerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreButtonClicked(UnityEngine.UI.Button@,UnityEngine.EventSystems.PointerEventData@)">
            <summary>
            Called before any button in the game is clicked
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Button.OnPointerClick
            </summary>
            <param name="button"></param>
            <param name="clickData"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostButtonClicked(UnityEngine.UI.Button,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called after any button in the game is clicked
            <br/>
            Equivalent to a HarmonyPostfix on Button.OnPointerClick
            </summary>
            <param name="button"></param>
            <param name="clickData"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreBloonEmissionsAdded(Il2CppAssets.Scripts.Simulation.Track.Spawner@,Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{Il2CppAssets.Scripts.Models.Rounds.BloonEmissionModel}@,System.Int32@,System.Int32)">
            <summary>
            Called before a new bloon emission is added to the spawner
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Spawner.AddEmissions
            </summary>
            <param name="spawner"></param>
            <param name="newEmissions"></param>
            <param name="round"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostBloonEmissionsAdded(Il2CppAssets.Scripts.Simulation.Track.Spawner,Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{Il2CppAssets.Scripts.Models.Rounds.BloonEmissionModel},System.Int32,System.Int32)">
            <summary>
            Called after a new bloon emission is added to the spawner
            <br/>
            Equivalent to a HarmonyPostfix on Spawner.AddEmissions
            </summary>
            <param name="spawner"></param>
            <param name="newEmissions"></param>
            <param name="round"></param>
            <param name="index"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreBloonEmitted(Il2CppAssets.Scripts.Simulation.Track.Spawner@,Il2CppAssets.Scripts.Models.Bloons.BloonModel@,System.Int32@,System.Int32@,System.Single@,Il2CppAssets.Scripts.Simulation.Bloons.Bloon@)">
            <summary>
            Called before a bloon is emitted from a spawner
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Spawner.Emit
            </summary>
            <param name="spawner"></param>
            <param name="bloonModel"></param>
            <param name="round"></param>
            <param name="index"></param>
            <param name="startingDist"></param>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostBloonEmitted(Il2CppAssets.Scripts.Simulation.Track.Spawner,Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Int32,System.Int32,System.Single,Il2CppAssets.Scripts.Simulation.Bloons.Bloon@)">
            <summary>
            Called after a bloon is emitted from a spawner
            <br/>
            Equivalent to a HarmonyPostfix on Spawner.Emit
            </summary>
            <param name="spawner"></param>
            <param name="bloonModel"></param>
            <param name="round"></param>
            <param name="index"></param>
            <param name="startingDist"></param>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PrePointerEnterSelectable(UnityEngine.UI.Selectable@,UnityEngine.EventSystems.PointerEventData@)">
            <summary>
            Called before the mouse goes over a button
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Button.OnPointerEnter
            </summary>
            <param name="button"></param>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostPointerEnterSelectable(UnityEngine.UI.Selectable@,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called after the mouse goes over a button
            <br/>
            Equivalent to a HarmonyPostfix on Button.OnPointerEnter
            </summary>
            <param name="button"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PrePointerExitSelectable(UnityEngine.UI.Selectable@,UnityEngine.EventSystems.PointerEventData@)">
            <summary>
            Called before the mouse leaves a button
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Button.OnPointerExit
            </summary>
            <param name="button"></param>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostPointerExitSelectable(UnityEngine.UI.Selectable@,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called after the mouse leaves a button
            <br/>
            Equivalent to a HarmonyPostfix on Button.OnPointerExit
            </summary>
            <param name="button"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreMapLoaded(Il2CppAssets.Scripts.Unity.Map.MapLoader@)">
            <summary>
            Called before a MapLoader loads a map
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on MapLoader.LoadMap
            </summary>
            <param name="mapLoader"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostMapLoaded(Il2CppAssets.Scripts.Unity.Map.MapLoader)">
            <summary>
            Called after a MapLoader loads a map
            <br/>
            Equivalent to a HarmonyPostfix on MapLoader.LoadMap
            </summary>
            <param name="mapLoader"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreRemoveableDestroyed(Il2CppAssets.Scripts.Simulation.Track.Removeable@)">
            <summary>
            Called before a Removeable is destroyed
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Map.DestroyRemoveable
            </summary>
            <param name="removeable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostRemoveableDestroyed(Il2CppAssets.Scripts.Simulation.Track.Removeable)">
            <summary>
            Called after a Removeable is destroyed
            <br/>
            Equivalent to a HarmonyPostfix on Map.DestroyRemoveable
            </summary>
            <param name="removeable"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreTowerButtonCreated(Il2CppAssets.Scripts.Models.Towers.TowerModel@,System.Int32@,System.Boolean@,Il2CppAssets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton@)">
            <summary>
            Called before a TowerPurchaseButton is created
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on ShopMenu.CreateTowerButton
            </summary>
            <param name="tower"></param>
            <param name="index"></param>
            <param name="showAmount"></param>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostTowerButtonCreated(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Boolean,Il2CppAssets.Scripts.Unity.UI_New.InGame.StoreMenu.TowerPurchaseButton@)">
            <summary>
            Called after a TowerPurchaseButton is created
            <br/>
            Equivalent to a HarmonyPostfix on ShopMenu.CreateTowerButton
            </summary>
            <param name="tower"></param>
            <param name="index"></param>
            <param name="showAmount"></param>
            <param name="button"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreTowerInventoryInit(Il2CppAssets.Scripts.Simulation.Input.TowerInventory@,System.Collections.Generic.IEnumerable{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel}@)">
            <summary>
            Called before a TowerInventory is initialized
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on TowerInventory.Init
            </summary>
            <param name="towerInventory"></param>
            <param name="baseTowers"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostTowerInventoryInit(Il2CppAssets.Scripts.Simulation.Input.TowerInventory,System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            Called after a TowerInventory is initialized
            <br/>
            Equivalent to a HarmonyPostfix on TowerInventory.Init
            </summary>
            <param name="towerInventory"></param>
            <param name="baseTowers"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreCashPickup(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Behaviors.Cash@,System.Single@)">
            <summary>
            Called before a banana is picked up
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on Cash.Pickup
            </summary>
            <param name="banana"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostCashPickup(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Behaviors.Cash,System.Single@)">
            <summary>
            Called after a banana is picked up
            <br/>
            Equivalent to a HarmonyPostfix on Cash.Pickup
            </summary>
            <param name="banana"></param>
            <param name="amount"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreEnterPlacementMode(Il2CppAssets.Scripts.Models.Towers.TowerModel@)">
            <summary>
            Called before a tower enters placement mode
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InputManager.EnterPlacementMode
            </summary>
            <param name="tower"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostEnterPlacementMode(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Called after a tower enters placement mode
            <br/>
            Equivalent to a HarmonyPostfix on InputManager.EnterPlacementMode
            </summary>
            <param name="tower"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PreShowUpgradeTree(Il2CppAssets.Scripts.Models.Towers.TowerModel@,System.Boolean@)">
            <summary>
            Called before the upgrade tree is shown for a tower
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on InGame.ShowUpgradeTree
            </summary>
            <param name="tower"></param>
            <param name="fromDoubleTap"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostShowUpgradeTree(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Boolean)">
            <summary>
            Called after the upgrade tree is shown for a tower
            <br/>
            Equivalent to a HarmonyPostfix on InGame.ShowUpgradeTree
            </summary>
            <param name="tower"></param>
            <param name="fromDoubleTap"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PrePauseScreenOpened(Il2CppAssets.Scripts.Unity.UI_New.Pause.PauseScreen@)">
            <summary>
            Called before the pause screen is opened
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on PauseScreen.Open
            </summary>
            <param name="pauseScreen"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostPauseScreenOpened(Il2CppAssets.Scripts.Unity.UI_New.Pause.PauseScreen)">
            <summary>
            Called after the pause screen is opened
            <br/>
            Equivalent to a HarmonyPostfix on PauseScreen.Open
            </summary>
            <param name="pauseScreen"></param>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PrePauseScreenClosed(Il2CppAssets.Scripts.Unity.UI_New.Pause.PauseScreen@)">
            <summary>
            Called before the pause screen is closed
            Return 'false' to prevent the original method from running
            <br/>
            Equivalent to a HarmonyPrefix on PauseScreen.Close
            </summary>
            <param name="pauseScreen"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.AdvancedBloonsTD6Mod.PostPauseScreenClosed(Il2CppAssets.Scripts.Unity.UI_New.Pause.PauseScreen)">
            <summary>
            Called after the pause screen is closed
            <br/>
            Equivalent to a HarmonyPostfix on PauseScreen.Close
            </summary>
            <param name="pauseScreen"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.ModRoundSet">
            <summary>
            Class for a custom RoundSet
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.RegistrationPriority">
            <summary>
            RoundSets register Bloons and before GameModes
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.BaseRounds">
            <summary>
            The Base Rounds included in the RoundSet specified by BaseRoundSet
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.DisplayNamePlural">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.BaseRoundSet">
            <summary>
            The id of the existing RoundSet to use as a base. Use RoundSetType.[name]
            If this RoundSetType.None, empty, or null, then an empty round set will be used
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.DefinedRounds">
            <summary>
            The total number of rounds that have specified Bloons.
            <br/>
            After this number of rounds, randomized Free Play rounds will happen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.Icon">
            <summary>
            The Icon for the Button for this RoundSet within the UI, by default looking for the same name as the file
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.AddToOverrideMenu">
            <summary>
            Whether this Round set should show up in the menu allowing you to use any RoundSet for any GameMode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyRoundModels(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32)">
            <summary>
            Called to modify any/all rounds from 1 to <see cref="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.DefinedRounds"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyEasyRoundModels(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32)">
            <summary>
            Called to modify specifically just rounds from 1 to 40
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyMediumRoundModels(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32)">
            <summary>
            Called to modify specifically just rounds from 41 to 60
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyHardRoundModels(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32)">
            <summary>
            Called to modify specifically just rounds from 61 to 80
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyImpoppableRoundModels(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32)">
            <summary>
            Called to modify specifically just rounds from 81 to 100
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.CustomHints">
            <summary>
            Whether these rounds should have custom hints, like Alternate Bloons Rounds does
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.GetHint(System.Int32)">
            <summary>
            Gets the custom hint for a specific round. Make sure <see cref="P:BTD_Mod_Helper.Api.Bloons.ModRoundSet.CustomHints"/> is overriden as true.
            <br/>
            For no hint, return null.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModRoundSet.ModifyGameModel(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Modifies the GameModel that's used for matches played with this round set
            </summary>
            <param name="gameModel"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.BloonModelUtils">
            <summary>
            Provides Utility methods for dealing with BloonModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.BloonModelUtils.ConstructBloonId(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs an accurate BloonID for a BloonModel based off of it's statuses.
            </summary>
            <param name="bloonName"></param>
            <param name="camo"></param>
            <param name="regrow"></param>
            <param name="fortified"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.BloonModelUtils.CreateGrowModel(System.String,System.Single)">
            <summary>
            Creates a GrowModel behavior that adds Regrowth.
            </summary>
            <param name="regrowsTo"></param>
            <param name="regrowRate"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.ModBloon">
            <summary>
            Class for adding in a new Bloon to the game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.RegistrationPriority">
            <summary>
            ModBloons with a BaseModBloon need to register after their base
            </summary>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModBloon.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.BaseBloon">
            <summary>
            The Bloon in the game that this should copy from as a base. Use BloonType.[Name]
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModBloon.ModifyBaseBloonModel(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Apply your custom modifications to the base bloon
            </summary>
            <param name="bloonModel"></param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.KeepBaseId">
            <summary>
            Set this to true if you're making another version of the BaseBloon, like a Fortified Red Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.Icon">
            <summary>
            The Icon for the Bloon within the UI, by default looking for the same name as the file
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.Fortified">
            <summary>
            Add the necessary properties to make this a Fortified Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.Regrow">
            <summary>
            Add the necessary properties to make this a Regrow Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.RegrowsTo">
            <summary>
            The ID of the bloon that this should regrow into
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.UseIconAsDisplay">
            <summary>
            Whether this Bloon should use its Icon as its display
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.RegrowRate">
            <summary>
            The regrow rate
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.Camo">
            <summary>
            Add the necessary properties to make this a Camo Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.DamageStates">
            <summary>
            The list of displays to use as DamageStates for this Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.PixelsPerUnit">
            <summary>
            For 2D bloons, the ratio between pixels and display units. Higher number -> smaller Bloon.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon.Scale">
            <summary>
            For bloons with UseIconAsDisplay, the scale for the texture to use
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.ModBloon`1">
            <summary>
            Class for a ModBloon which has a different ModBloon as its base
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon`1.KeepBaseId">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModBloon`1.BaseBloon">
            <summary>
            The BaseBloon is the same as its base's
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.ModVanillaBloon">
            <summary>
            Allows you to easily modify the models of a specific vanilla Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloon.BloonId">
            <summary>
            The id of the vanilla Bloon to change
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloon.MatchBaseId">
            <summary>
            Whether this should match by BaseId instead of Id.
            <br/>
            If true, RedCamo would be affected as well if your <see cref="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloon.BloonId"/> was Red
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModVanillaBloon.GetAffected(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Gets the BloonModels affected by this ModVanillaBloon
            </summary>
            <param name="gameModel"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Bloons.ModVanillaBloons">
            <summary>
            Allows you to easily modify the models of multiple vanilla Bloons
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloons.BloonIds">
            <summary>
            The ids of the vanilla Bloon to change
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloons.MatchBaseId">
            <summary>
            Whether this should match by BaseId instead of Id.
            <br/>
            If true, RedCamo would be affected as well if your <see cref="P:BTD_Mod_Helper.Api.Bloons.ModVanillaBloons.BloonIds"/> was Red
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Bloons.ModVanillaBloons.GetAffected(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Gets the BloonModels affected by this ModVanillaBloons
            </summary>
            <param name="gameModel"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ByteWaitTask">
            <summary>
            Initial task to register ModContent from other mods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ByteWaitTask.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ByteWaitTask.Load">
            <summary>
            Don't load this like a normal task
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ByteWaitTask.Coroutine">
            <summary>
            Wait for the bytes to all be loaded
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModGameMenuTracker">
            <summary>
            Component to track that a instance of a GameMenu's gameObject actually is the same ModGameMenu as was opened,
            as direct comparison on the Unity Objects does not work reliably
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModGameMenuTracker.modGameMenuId">
            <summary>
            The Id of the ModGameMenu that this is for
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModGameMenuTracker.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperComponent">
            <summary>
            Base for a helper component for making custom UIs in the same style as Vanilla ones
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddButton(BTD_Mod_Helper.Api.Components.Info,System.String,Il2CppSystem.Action)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperButton.Create(BTD_Mod_Helper.Api.Components.Info,System.String,Il2CppSystem.Action)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddImage(BTD_Mod_Helper.Api.Components.Info,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperImage.Create(BTD_Mod_Helper.Api.Components.Info,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddImage(BTD_Mod_Helper.Api.Components.Info,UnityEngine.Sprite)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperImage.Create(BTD_Mod_Helper.Api.Components.Info,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddText(BTD_Mod_Helper.Api.Components.Info,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperText.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single,Il2CppTMPro.TextAlignmentOptions)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddText(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperText.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single,Il2CppTMPro.TextAlignmentOptions)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddText(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single,Il2CppTMPro.TextAlignmentOptions)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperText.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single,Il2CppTMPro.TextAlignmentOptions)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddDropdown(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Create(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String,System.Single)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddDropdown(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Create(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String,System.Single)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddDropdown(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Create(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String,System.Single)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddSlider(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddSlider(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddSlider(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddSlider(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddSlider(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddCheckbox(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Create(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddCheckbox(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Create(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddCheckbox(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Create(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddCheckbox(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Create(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String})">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddInputField(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)"/>
            <exclude/>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.DefaultFontSize">
            <summary>
            Default font size for UI labels
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.DefaultTextAlignment">
            <summary>
            Default alignment for texts and input fields
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.disableNextFrame">
            <summary>
            Bool for if this should disable itself on the next frame
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.enableNextFrame">
            <summary>
            Bool for if this should enable itself on the next frame
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.parent">
            <summary>
            The ModHelperComponent that this is a child of, if any
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperComponent.initialInfo">
            <summary>
            The Info object that this was defined with, determining its initial name, position and size
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperComponent.RectTransform">
            <summary>
            The RectTransform for this GameObject
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperComponent.LayoutElement">
            <summary>
            The LayoutElement component, if this has been assigned one
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperComponent.LayoutGroup">
            <summary>
            The LayoutGroup component, if this has been assigned one
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.SetParent(UnityEngine.Transform)">
            <summary>
            Sets a particular transform to be the parent of this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.SetParent(BTD_Mod_Helper.Api.Components.ModHelperComponent)">
            <summary>
            Sets a particular ModHelperComponent to be the parent of this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.Add``1(``0)">
            <summary>
            Adds another ModHelperComponent as a child of this, returning the child
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddComponent``1">
            <inheritdoc cref="M:UnityEngine.GameObject.AddComponent``1" />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.RemoveComponent``1">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.GameObjectExt.RemoveComponent``1(UnityEngine.GameObject)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddLayoutElement">
            <summary>
            Adds and returns a LayoutElement for this, making it work as part of a LayoutGroup
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.FitContent(UnityEngine.UI.ContentSizeFitter.FitMode,UnityEngine.UI.ContentSizeFitter.FitMode)">
            <summary>
            Adds and returns a ContentSizeFitter with the given properties
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.GetDescendent``1(System.String)">
            <summary>
            Gets a descendent component with the given name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.SetActive(System.Boolean)">
            <summary>
            Sets whether or not this is active
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.SetInfo(BTD_Mod_Helper.Api.Components.Info)">
            <summary>
            Applies the properties of an info struct to this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.OnUpdate">
            <summary>
            Unity Component Update
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.DeleteObject">
            <summary>
            Deletes the underlying GameObject this is attached to, not just the component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.op_Implicit(BTD_Mod_Helper.Api.Components.ModHelperComponent)~UnityEngine.GameObject">
            <summary>
            Implicitly get the gameObject
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.op_Implicit(BTD_Mod_Helper.Api.Components.ModHelperComponent)~UnityEngine.RectTransform">
            <summary>
            Implicitly get the RectTransform
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperInputField">
            <summary>
            ModHelperComponent for a text input field
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperInputField.InputField">
            <summary>
            The InputField component
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperInputField.Text">
            <summary>
            The Text ModHelperComponent
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperInputField.CurrentValue">
            <summary>
            Gets the current value of the InputField
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.SetText(System.String,System.Boolean)">
            <summary>
            Sets the current value of this
            </summary>
            <param name="text">The new text</param>
            <param name="sendCallback">Whether the onValueChanged listener should fire</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.String,UnityEngine.Events.UnityAction{System.String},System.Single,Il2CppTMPro.TMP_InputField.CharacterValidation,Il2CppTMPro.TextAlignmentOptions,System.String,System.Int32)">
            <summary>
            Creates a new ModHelperInputField
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="defaultValue">The default text that's in the field</param>
            <param name="background">The sprite for the background panel</param>
            <param name="onValueChanged">An action to be called when the text is changed</param>
            <param name="fontSize">The size of the displayed text</param>
            <param name="validation">The type of validation used on user input</param>
            <param name="align">The alignment of the text</param>
            <param name="placeholder"></param>
            <param name="padding"></param>
            <returns>The created ModHelperInputField</returns>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperInputField.OnUpdate">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperSlider">
            <summary>
            ModHelperComponent for a sliding input
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperSlider.Slider">
            <summary>
            The actual Slider component
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperSlider.Fill">
            <summary>
            The panel that's the filled up bar part of the slider
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperSlider.defaultValue">
            <summary>
            The Default value, not scaled to anything
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperSlider.CurrentValue">
            <summary>
            The real current value, scaled by the appropriate scale factor
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperSlider.DefaultNotch">
            <summary>
            The image showing where the default value is on the slider
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperSlider.Label">
            <summary>
            The text that's on the notch of the slider
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.SetCurrentValue(System.Single,System.Boolean)">
            <summary>
            Sets the current value of this
            </summary>
            <param name="value">The new value</param>
            <param name="sendCallback">Whether the onValueChanged listener should fire</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperSlider.Create(BTD_Mod_Helper.Api.Components.Info,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Events.UnityAction{System.Single},System.Single,System.String,System.Nullable{System.Single})">
            <summary>
            Creates a new ModHelperSlider
            </summary>
            <param name="info">The name/position/size info. NOTE: height must be a set value</param>
            <param name="defaultValue">The default slider amount</param>
            <param name="minValue">The minimum value of the slider</param>
            <param name="maxValue">The maximum value of the slider</param>
            <param name="stepSize">What value the slider should increase by per tick</param>
            <param name="handleSize">The height and width of the pip</param>
            <param name="onValueChanged">Action should happen when the slider changes value, or null</param>
            <param name="fontSize">The size of the label text</param>
            <param name="labelSuffix">String to add to the end of the label, e.g. "%"</param>
            <param name="startingValue">If not null, the value that this should start as instead of the default</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperText">
            <summary>
            ModHelperComponent for a background panel
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperText.Text">
            <summary>
            The component that handles the Text rendering
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperText.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperText.SetText(System.String)">
            <summary>
            Sets the text of this text to the given text
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperText.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Single,Il2CppTMPro.TextAlignmentOptions)">
            <summary>
            Creates a new ModHelperText
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="text">The text to display</param>
            <param name="fontSize">Size of font</param>
            <param name="align">Alignment of text</param>
            <returns>The created ModHelperText</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.Info">
            <summary>
            Struct used to represent the name, position and size information of a ModHelperComponent
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Name">
            <summary>
            The name of the ModHelperComponent's Unity GameObject
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Position">
            <summary>
            The localPosition field, by default relative to the parent's center unless anchors are changed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.X">
            <summary>
            The localPosition x field, by default relative to the parent's center unless anchors are changed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Y">
            <summary>
            The localPosition y field, by default relative to the parent's center unless anchors are changed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.SizeDelta">
            <summary>
            The sizeDelta field. This technically is how much the size should change compared to (anchorMax - anchorMin)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Size">
            <summary>
            Sets both the width and the height to be a certain value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Width">
            <summary>
            The sizeDelta x field. This technically is how much the width should change compared to (anchorMax.x - anchorMin.x)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Height">
            <summary>
            The sizeDelta y field. This technically is how much the width should change compared to (anchorMax.x - anchorMin.x)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.FlexWidth">
            <summary>
            If this is part of a layout group, then the relative flexible width of this component.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.FlexHeight">
            <summary>
            If this is part of a layout group, then the relative flexible height of this component.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Flex">
            <summary>
            Sets both FlexWidth and FlexHeight to be a certain value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMin">
            <summary>
            The lower anchor. (0, 0) is the parent's lower left while (1,1) is the parent's upper right. Default (0.5, 0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMinX">
            <summary>
            Sets the X coordinate of the AnchorMin to be the specified value, leaving the Y coordinate unchanged (0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMinY">
            <summary>
            Sets the Y coordinate of the AnchorMin to be the specified value, leaving the X coordinate unchanged (0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMax">
            <summary>
            The upper anchor. (0, 0) is the parent's lower left while (1,1) is the parent's upper right. Default (0.5, 0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMaxX">
            <summary>
            Sets the X coordinate of the AnchorMax to be the specified value, leaving the Y coordinate unchanged (0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.AnchorMaxY">
            <summary>
            Sets the Y coordinate of the AnchorMax to be the specified value, leaving the X coordinate unchanged (0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Anchor">
            <summary>
            Sets both AnchorMin and AnchorMax to the given value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Scale">
            <summary>
            The local scale field to initialize width
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.Pivot">
            <summary>
            The point between (0, 0) and (1, 1) that this object rotates around and expands out from, by default (0.5, 0.5)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.PivotX">
            <summary>
            The x component of the pivot
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.Info.PivotY">
            <summary>
            The y component of the pivot
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String)">
            <summary>
            Creates a new info struct representing the name, position and size of a ModHelperComponent
            <param name="name">The name of the ModHelperComponent's Unity GameObject</param>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String)"/>
            <param name="width">The sizeDelta x field. This technically is how much the width should change compared to (anchorMax.x - anchorMin.x)</param>
            <param name="height">The sizeDelta x field. This technically is how much the width should change compared to (anchorMax.x - anchorMin.x)</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String)"/>
            <param name="size">Sets both the width and the height to be this value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single)"/>
            <param name="x">The localPosition x field, by default relative to the parent's center unless anchors are changed</param>
            <param name="y">The localPosition y field, by default relative to the parent's center unless anchors are changed</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single)"/>
            <param name="x">The localPosition x field, by default relative to the parent's center unless anchors are changed</param>
            <param name="y">The localPosition y field, by default relative to the parent's center unless anchors are changed</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)"/>
            <param name="anchor">Sets both anchorX and anchorY to this value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,UnityEngine.Vector2)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single)"/>
            <param name="anchor">Sets both anchorX and anchorY to this value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,UnityEngine.Vector2)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single)"/>
            <param name="anchor">Sets both anchorX and anchorY to this value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Vector2)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector2)"/>
            <param name="pivot">The point between (0, 0) and (1, 1) that this object rotates around and expands out from, by default (0.5, 0.5)</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.#ctor(System.String,BTD_Mod_Helper.Api.Components.InfoPreset)">
            <summary>
            Creates a new info struct representing the name, position and size of a ModHelperComponent
            </summary>
            <param name="name">The name of the ModHelperComponent's Unity GameObject</param>
            <param name="preset">A preset to apply</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.Apply(UnityEngine.RectTransform)">
            <summary>
            Sets the properties of the RectTransform based on this Info object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.Info.Duplicate(System.String)">
            <summary>
            Creates a new Info with all the same properties as this
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.InfoPreset">
            <summary>
            Specific common preset setups of Info structs
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.InfoPreset.FillParent">
            <summary>
            Will fill its parent component by matching its top left and bottom right with the parent's
            <br/>
            Equivalent to
            <code>
            {
                AnchorMin = new Vector2(0, 0),
                AnchorMax = new Vector2(1, 1)
            }
            </code>
            Set alongside negative width/height to add padding around the edges, or positive to expand beyond
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.InfoPreset.Flex">
            <summary>
            Will fully flex horizontally and vertically,
            <br/>
            Equivalent to
            <code>
            {
                FlexWidth = 1,
                FlexHeight = 1
            }
            </code>
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.MatchLocalPosition">
            <summary>
            Component to make this transform continuously match the position of another transform
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.MatchLocalPosition.transformToCopy">
            <summary>
            Other transform to constantly copy the scale from
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.MatchLocalPosition.offset">
            <summary>
            Offset from the transform to stay
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.MatchLocalPosition.scale">
            <summary>
            Scale for the original local position
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.MatchLocalPosition.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperButton">
            <summary>
            ModHelperComponent for a background panel
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperButton.LongBtnRatio">
            <summary>
            The aspect ratio of LongBtn sprites, since they aren't sliced for some reason lol
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperButton.Image">
            <summary>
            The displayed image of the button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperButton.Button">
            <summary>
            The actual button component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperButton.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperButton.Create(BTD_Mod_Helper.Api.Components.Info,System.String,Il2CppSystem.Action)">
            <summary>
            Creates a new ModHelperButton
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="sprite">The button's visuals</param>
            <param name="onClick">What should happen when the button is clicked</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperCategory">
            <summary>
            ModHelperComponent for a category in the mod settings menu
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperCategory.CategoryContent">
            <summary>
            The panel that holds all the mod settings
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ModHelperCategory.collapsed">
            <summary>
            Whether the category is hidden or not
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperCategory.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperCategory.Create(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new ModHelperCategory
            </summary>
            <param name="displayName">The name of the category</param>
            <param name="collapsed">Whether it's collapsed by default or not</param>
            <param name="icon">The icon for the category, if any</param>
            <returns>The created ModHelperCategory</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperCheckbox">
            <summary>
            ModHelperComponent for a Checkbox
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Toggle">
            <summary>
            The Toggle component
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Check">
            <summary>
            The ModHelperImage for the Checkmark
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.CurrentValue">
            <summary>
            Whether it is currently checked or not
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.SetChecked(System.Boolean,System.Boolean)">
            <summary>
            Sets the current value of this
            </summary>
            <param name="isChecked">The new value</param>
            <param name="sendCallback">Whether the onValueChanged listener should fire</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperCheckbox.Create(BTD_Mod_Helper.Api.Components.Info,System.Boolean,System.String,UnityEngine.Events.UnityAction{System.Boolean},System.String,System.Int32)">
            <summary>
            Creates a new ModHelperCheckbox
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="defaultValue">If it starts out checked or not</param>
            <param name="onValueChanged">Action to perform when it is checked/unchecked, or null</param>
            <param name="background">The background behind the check, or null for nothing</param>
            <param name="checkImage">The checkmark itself, or null for the default checkmark</param>
            <param name="padding">How much space around the outside of the check there is</param>
            <returns>The new ModHelperCheckbox</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperComponentExt">
            <summary>
            Extensions for mod helper components, for using generics and based on restricts for il2cpp objects
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponentExt.AddTo``1(``0,UnityEngine.Transform)">
            <summary>
            Adds the ModHelperComponent to a parent Transform, returning the ModHelperComponent
            <br />
            (This is an extension method just so that we can return the type generically)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponentExt.AddModHelperComponent``1(BTD_Mod_Helper.Api.Components.ModHelperComponent,``0)">
            <summary>
            Adds the ModHelperComponent to a parent GameObject, returning the ModHelperComponent
            <br />
            (This is an extension method just so that we can return the type generically)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperComponentExt.Duplicate``1(``0,System.String)">
            <summary>
            Creates a copy of this ModHelperComponent with the same parent
            </summary>
            <param name="component">this</param>
            <param name="name">Its new name</param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperDropdown">
            <summary>
            ModHelperComponent for a 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Background">
            <summary>
            The Image being displayed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Text">
            <summary>
            The Text which shows the currently selected value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Dropdown">
            <summary>
            The component which handles the dropdown
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Arrow">
            <summary>
            The Arrow image
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.TemplatePanel">
            <summary>
            The template object for the window of the dropdown
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperDropdown.TemplateItem">
            <summary>
            The default item in the template
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperDropdown.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperDropdown.Create(BTD_Mod_Helper.Api.Components.Info,Il2CppSystem.Collections.Generic.List{System.String},System.Single,UnityEngine.Events.UnityAction{System.Int32},System.String,System.Single)">
            <summary>
            Creates a new ModHelperDropdown
            </summary>
            <param name="info">The name/position/size info. NOTE: width/height must be set to actual values</param>
            <param name="options">The list of options</param>
            <param name="windowHeight">Height of the created dropdown window</param>
            <param name="onValueChanged">Action that should happen when an option of the given index is selected</param>
            <param name="background">The background image</param>
            <param name="labelFontSize">Text size of label</param>
            <returns>The created ModHelperDropdown</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperImage">
            <summary>
            ModHelperComponent for a 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperImage.Image">
            <summary>
            The Image being displayed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperImage.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperImage.Create(BTD_Mod_Helper.Api.Components.Info,System.String)">
            <summary>
            Creates a new ModHelperImage
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="sprite">The sprite to display</param>
            <returns>The created ModHelperImage</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperImage.Create(BTD_Mod_Helper.Api.Components.Info,UnityEngine.Sprite)">
            <summary>
            Creates a new ModHelperImage
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="sprite">The sprite to display</param>
            <returns>The created ModHelperImage</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperOption">
            <summary>
            ModHelperComponent that's the base panel for the visual representation of a ModSetting
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.Name">
            <summary>
            The displayed name for this setting
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.ResetButton">
            <summary>
            The button that resets this setting
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.Icon">
            <summary>
            The Icon for this setting. Will be null if no Icon provided
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.InfoButton">
            <summary>
            The button that popups the description when pressed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.TopRow">
            <summary>
            The top row of elements containing icon, name, info button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.BottomRow">
            <summary>
            The bottom row of elements containing the reset button and whatever input is added
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperOption.RestartIcon">
            <summary>
            The image shown when this setting requires a restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperOption.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperOption.SetResetAction(UnityEngine.Events.UnityAction)">
            <summary>
            Adds an action to the reset button
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperOption.Create(System.String,System.String,System.String)">
            <summary>
            Creates a new MoodHelperOption
            </summary>
            <param name="displayName">The displayed name of the mod setting</param>
            <param name="description">The description of the mod setting, if any</param>
            <param name="icon">The icon of the mod setting, if any</param>
            <returns>The created ModHelperOption</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperOption.Create``1(System.String,System.String,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperOption.Create(System.String,System.String,System.String)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperPanel">
            <summary>
            ModHelperComponent for a background panel
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperPanel.Background">
            <summary>
            The background image
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)">
            <summary>
            Creates a new ModHelperPanel
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="backgroundSprite">The panel's background sprite</param>
            <param name="layoutAxis">If present, creates this panel with a Horizontal/Vertical layout group</param>
            <param name="spacing">The layout group's spacing</param>
            <param name="padding">The layout group's padding</param>
            <returns>The created ModHelperPanel</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create``1(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel">
            <summary>
            ModHelperComponent for a background panel
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.ScrollContent">
            <summary>
            The ScrollContent object. This is the object that the children are actually part of,
            and is what actually moves up and down when scrolling.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.ScrollRect">
            <summary>
            The ScrollRect component which controls many aspects of scrolling
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Mask">
            <summary>
            The Mask component which prevents overflow of rendering outside the scroll area
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.ContentSizeFitter">
            <summary>
            The ContentSizeFitter component which makes sure that the ScrollContent
            is the right size to hold all the scrollable items.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.AddScrollContent(BTD_Mod_Helper.Api.Components.ModHelperComponent)">
            <summary>
            Adds a child to the ScrollContent of this panel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ModHelperScrollPanel.Create(BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)">
            <summary>
            Creates a new ModHelperScrollPanel
            </summary>
            <param name="info">The name/position/size info</param>
            <param name="axis">The axis that it scrolls in, or null for both directions</param>
            <param name="backgroundSprite">The panel's background sprite</param>
            <param name="spacing">If axis is not null, then the layout spacing for the items</param>
            <param name="padding"></param>
            <returns>The created ModHelperScrollPanel</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Components.ScaleOverride">
            <summary>
            Custom component to keep the scale of a transform permanently at 0, even if an Animator tries to change it
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Components.ScaleOverride.scale">
            <summary>
            The scale to set it to
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Components.ScaleOverride.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Coop.MessageUtils">
            <summary>
            Utility functions used for sending messages over the network.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Coop.MessageUtils.CreateMessageEx``1(``0,System.String)">
            <summary>
            Creates a message to be sent over the network.
            The message will be serialized as JSON.
            </summary>
            <param name="objectToSend">The object to be sent. The object's properties will be serialized.</param>
            <param name="code">Unique code for your specific message.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Coop.MessageUtils.ReadMessage``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppStructArray{System.Byte})">
            <summary>
            Reads a message sent from the network.
            Assumes message is sent as JSON. (via <see cref="M:BTD_Mod_Helper.Api.Coop.MessageUtils.CreateMessageEx``1(``0,System.String)"/>)
            </summary>
            <param name="serializedMessage">Raw bytes received from the network.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Coop.MessageUtils.ReadMessage``1(Il2CppNinjaKiwi.NKMulti.Message)">
            <summary>
            Reads a message sent from the network.
            Assumes message is sent as JSON. (via <see cref="M:BTD_Mod_Helper.Api.Coop.MessageUtils.CreateMessageEx``1(``0,System.String)"/>)
            </summary>
            <param name="message">Message received from the network.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Coop.MessageUtils.CreateMessage``1(``0,System.String)">
            <summary>
            Old way to send a message
            </summary>
            <param name="objectToSend"></param>
            <param name="code"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModDisplay">
            <summary>
            A custom Display that is a copy of an existing Display that can be modified
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.DisplayCategory">
            <summary>
            The DisplayCategory to use for the DisplayModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Set2DTexture(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Sets the sprite texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.GetDisplayModel">
            <summary>
            Gets a new DisplayModel based on this ModDisplay
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.GetDisplay(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Display for a given tower, optionally for the given tiers
            </summary>
            <param name="tower">The tower base id</param>
            <param name="top">Path 1 tier</param>
            <param name="mid">Path 2 tier</param>
            <param name="bot">Path 3 tier</param>
            <returns>The display GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.UseNode(System.String,System.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode},Il2CppAssets.Scripts.Models.GenericBehaviors.DisplayCategory)">
            <summary>
            Gets a UnityDisplayNode for a different guid
            </summary>
            <param name="guid">The asset reference guid to get the node from</param>
            <param name="action">What to do with the node</param>
            <param name="displayCategory"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.UseNode(System.String,System.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Gets a UnityDisplayNode for a different guid
            </summary>
            <param name="guid">The asset reference guid to get the node from</param>
            <param name="action">What to do with the node</param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.RegistrationPriority">
            <summary>
            ModDisplays register first
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay">
            <summary>
            The GUID of the display to copy this ModDisplay off of
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplayReference">
            <summary>
            The prefab reference itself of the base display that will be used
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.ModifyDisplayNode(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Alters the UnityDisplayNode that was copied from the one used by <see cref="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay"/>
            </summary>
            <param name="node">The prototype unity display node</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.ModifyDisplayNodeAsync(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Action)">
            <summary>
            Allows you to modify this node asynchronously. On complete must be called for load to work! Takes
            place after the non-async ModifyDisplayNode call
            </summary>
            <param name="node">The prototype unity display node</param>
            <param name="onComplete">Callback for when you've finished changing the node</param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.PositionOffset">
            <summary>
            The position offset to render the display at (z axis is up toward camera)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.Scale">
            <summary>
            The scale to render the display at
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.PixelsPerUnit">
            <summary>
            How many pixels in a sprite texture should be equal to one unit
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.ModifiesUnityObject">
            <summary>
            If you modify the unity Object and not just the DisplayNode attached to it, then set this to true
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshTexture(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Sets the mesh texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshTexture(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String,System.Int32)">
            <summary>
            Sets the mesh texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
            <param name="index">The index to set at</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshOutlineColor(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,UnityEngine.Color)">
            <summary>
            Sets the outline color for the first mesh renderer in the given node
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="color">The color for it to be outlined (when not highlighted)</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshOutlineColor(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,UnityEngine.Color,System.Int32)">
            <summary>
            Sets the outline color for the index'th mesh renderer in the given node
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="color">The color for it to be outlined (when not highlighted)</param>
            <param name="index">What index of mesh renderer to use</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Applies this ModDisplay to a given BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies this ModDisplay to a given TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Applies this ModDisplay to a given ProjectileModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Il2CppAssets.Scripts.Models.GenericBehaviors.DisplayModel)">
            <summary>
            Applies this ModDisplay to a given DisplayModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Create(Il2CppAssets.Scripts.Unity.Display.Factory,Il2CppAssets.Scripts.Utils.PrefabReference,System.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Gets the prototype to use for a callback in CreateAsync
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.CreateAsyncCallback(Il2CppAssets.Scripts.Unity.Display.Factory,Il2CppAssets.Scripts.Utils.PrefabReference,Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Recreated version of the CreateAsync_b__0 callback. Would like to just call this directly, but manually
            messing with the __DisplayClass_s proved buggy.
            </summary>
            <returns>The unity display node for the newly created display</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.CreateNewPrototype(Il2CppAssets.Scripts.Unity.Display.Factory,Il2CppAssets.Scripts.Utils.PrefabReference,Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Creates and stores a new prototype for a prefab reference based on an original prototype
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetupUDN(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Action)">
            <summary>
            Applies the effects of a ModDisplay on a UnityDisplayNode
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Display.ModDisplay.Generic2dDisplay">
            <summary>
            The display id for a Red Bloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.AssetBundleName">
            <summary>
            The name of the asset bundle file that the model is in, not including the .bundle extension
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.PrefabName">
            <summary>
            The name of the prefab that the model has within the Asset Bundle
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.MaterialName">
            <summary>
            The name of the material that should be applied to the tower from the asset bundle, if any
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.LoadAsync">
            <summary>
            Whether to try loading the asset from the bundle asynchronously.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ICustomDisplayExt.GetBasePrototype(BTD_Mod_Helper.Api.Display.ICustomDisplay,BTD_Mod_Helper.BloonsMod,System.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Gets the base prototype from an asset bundle and given prefab name
            </summary>
            <param name="display">this</param>
            <param name="mod">mod to look for the asset bundle in</param>
            <param name="onComplete">completion action</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ICustomDisplayExt.CompletePrototype(BTD_Mod_Helper.Api.Display.ICustomDisplay,UnityEngine.GameObject,UnityEngine.AssetBundle,System.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Finishes setting up the prototype, possible applying the material
            </summary>
            <param name="display">this</param>
            <param name="gameObject">the prototype game object</param>
            <param name="assetBundle">the assetbundle in question</param>
            <param name="onComplete">completion action</param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModBloonDisplay">
            <summary>
            A ModDisplay that will automatically apply to a ModBloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBloonDisplay.DisplayCategory">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModBloonDisplay.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBloonDisplay.Bloon">
            <summary>
            The ModBloon that this ModDisplay is used for
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBloonDisplay.Damage">
            <summary>
            How damaged the Bloon is, higher numbers = use when more damaged
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModBloonDisplay.GetBloonDisplay(System.String,System.Int32)">
            <summary>
            Gets the display used by the given Bloon, optionally at a particular damage amount
            </summary>
            <param name="bloonId"></param>
            <param name="damagedAmount"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModBloonDisplay`1">
            <summary>
            A convenient generic class for applying a ModBloonDisplay to a ModBloon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBloonDisplay`1.Bloon">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModBuffIcon">
            <summary>
            Class for adding a new buff icon that can be displayed for towers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.RegistrationPriority">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.DisplayNamePlural">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.Description">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.Icon">
            <summary>
            The Icon for to display for the buff
            <br/>
            (Name of .png or .jpg, not including file extension)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.GlobalRange">
            <summary>
            Whether the buff affects every tower on screen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.MaxStackSize">
            <summary>
            If greater than 0, the total number of stacks that a tower can have at one time
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.OnlyShowBuffIfMutated">
            <summary>
            Controls the OnlyShowBuffIfMutated property on the model
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModBuffIcon.ApplyTo(Il2CppAssets.Scripts.Models.Towers.Behaviors.SupportModel)">
            <summary>
            Makes a support model use this as its buff indicator
            </summary>
            <param name="model">The support model to apply to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModBuffIcon.ApplyTo(Il2CppAssets.Scripts.Models.Towers.Behaviors.TowerBehaviorBuffModel)">
            <summary>
            Makes a support model use this as its buff indicator
            </summary>
            <param name="model">The support model to apply to</param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.BuffLocsName">
            <summary>
            What should go in a Model's buffLocsName field
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModBuffIcon.BuffIconName">
            <summary>
            What should go in a Model's buffIconName field
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModBuffIcon.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModCustomDisplay">
            <summary>
            The custom version of a ModDisplay that loads in a model from a unity assetbundle
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.AssetBundleName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.PrefabName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.MaterialName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.BaseDisplay">
            <summary>
            On a ModCustomDisplay, this property does nothing
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.LoadAsync">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModCustomDisplay.ModifyDisplayNode(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Performs alterations to the unity display node when it is created
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModDisplay2D">
            <summary>
            Mod Display specifically set up to be a 2d image 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay2D.BaseDisplay">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay2D.TextureName">
            <summary>
            The file name (no .png) from your mod that you want to use as the 2d texture
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay2D.Apply(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay2D.ModifyDisplayNode(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModDisplay2DImpl">
            <summary>
            Class used internally to represent displays for <see cref="T:BTD_Mod_Helper.Api.Towers.ModTower"/>s using <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel"/>
            and <see cref="T:BTD_Mod_Helper.Api.Bloons.ModBloon"/>s using <see cref="P:BTD_Mod_Helper.Api.Bloons.ModBloon.UseIconAsDisplay"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay2DImpl.#ctor(BTD_Mod_Helper.BloonsMod,System.String,System.String,System.Single)">
            <summary>
            Creates a new Mod
            </summary>
            <param name="bloonsMod">The mod this is for</param>
            <param name="id">Id for the display to use</param>
            <param name="textureName">Texture name, not a guid</param>
            <param name="scale">Scale to use</param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay">
            <summary>
            A ModCustomDisplay that will automatically apply to a ModTower for specific tiers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.AssetBundleName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.PrefabName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.MaterialName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.LoadAsync">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.BaseDisplay">
            <summary>
            On a ModCustomDisplay, this property does nothing
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.ModifyDisplayNode(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Performs alterations to the unity display node when it is created
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay`1">
            <summary>
            A convenient generic class for applying a ModTowerCustomDisplay to a ModTower
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerDisplay">
            <summary>
            A ModDisplay that will automatically apply to a ModTower for specific tiers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay.DisplayCategory">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay.Tower">
            <summary>
            The ModTower that this ModDisplay is used for
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.UseForTower(System.Int32[])">
            <summary>
            Returns true if this display should be used by its Tower for the given tiers
            </summary>
            <param name="tiers">The potential tiers of the tower</param>
            <returns>If the Tower should have this display</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ApplyToTower(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies this ModTowerDisplay to the towerModel. Override to change how this applies, i.e. making it
            apply to an AttackModel instead
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ParagonDisplayIndex">
            <summary>
            A number between 0 and 4 (inclusive) representing which set of paragon degrees this display applies to
            <br/>
            0: Degree 1 - 20
            <br/>
            1: Degree 21 - 40
            <br/>
            2: Degree 41 - 60
            <br/>
            3: Degree 61 - 80
            <br/>
            4: Degree 81 - 100
            <br/>
            If you don't have one for every index, then the next highest one will be used
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ModifyDisplayNode(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Alters the UnityDisplayNode that was copied from the one used by <see cref="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay"/>
            <br/>
            By default, this will change the main texture of the first SkinnedMeshRenderer of the node to that of a
            png with the same name as the class
            </summary>
            <param name="node">The UnityDisplayNode</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.IsParagon(System.Int32[])">
            <summary>
            If the tower tiers make it count as a Paragon
            </summary>
            <param name="tiers"></param>
            <returns></returns>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Display.ModTowerDisplay.TotalParagonDisplays">
            <summary>
            Number of different Paragon displays that are used by default
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerDisplay`1">
            <summary>
            A convenient generic class for applying a ModTowerDisplay to a ModTower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Enums.RoundSetType">
            <summary>
            In game IDs for the round sets included in BTD6
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Enums.ScheduleType">
            <summary>
            Controls how you want to wait the Task Scheduler to wait for your tasks
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Enums.TowerSetType">
            <summary>
            Enum-like class for the different tower set types
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Enums.TowerSetType.Primary">
            <summary>
            The primary set of towers
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Enums.TowerSetType.Military">
            <summary>
            The military set of towers
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Enums.TowerSetType.Magic">
            <summary>
            The magic set of towers
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Enums.TowerSetType.Support">
            <summary>
            The support set of towers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Enums.TowerSetType.All">
            <summary>
            Enumeration of all (vanilla) tower sets
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Enums.TowerSetType.Custom``1">
            <summary>
            Gets the ID to use for a custom tower set
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.CostHelper">
            <summary>
            Helper for scaling costs to difficulties
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.CostHelper.CostForDifficulty(System.Int32,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Models.ModModel})">
            <summary>
            Gets a modified cost for a given set of ModModels that are used to setup a match
            Somewhere deep within those mods is likely to be a Cost modifier, and this will find and apply that
            </summary>
            <param name="cost">The default cost</param>
            <param name="mods">The mods that the match is using</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.CostHelper.CostForDifficulty(System.Int32,Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Gets a modified cost for a given GameModel's difficulty
            </summary>
            <param name="cost">The default cost</param>
            <param name="gameModel">The current GameModel</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.CostHelper.CostForDifficulty(System.Int32,Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Gets a modified cost for a given instance of InGame
            </summary>
            <param name="cost">The default cost</param>
            <param name="inGame">Current instance of InGame</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.CostHelper.CostForDifficulty(System.Int32,System.String)">
            <summary>
            Scales a base (medium) cost to the given difficulty
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.CostHelper.CostForDifficulty(System.Int32,System.Single)">
            <summary>
            Applies a multiplier to a cost and rounds it
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.FileDialogHelper">
            <summary>
            Class to help with the usage of Native File Dialogs
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileDialogHelper.PrepareNativeDlls">
            <summary>
            Ensure that the NFD native dlls are present in the game root folder
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.GameModelExporter">
            <summary>
            Class for handily exporting elements of the GameModel to json files
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.GameModelExporter.ExportAll">
            <summary>
            Exports every bit of GameModel and GameData info of note to the local folder
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.GameModelExporter.TryExport(Il2CppSystem.Object,System.String)">
            <summary>
            Exports a Model to the path, returning whether it was successful. Does not log anything.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.GameModelExporter.Export(Il2CppSystem.Object,System.String)">
            <summary>
            Tries to save a specific Model and logs doing so
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.MapHelper">
            <summary>
            Contains helper methods for working with maps and custom maps.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePointInfo(System.Single,System.Single)">
            <summary>
            Create a <see cref="T:Il2CppAssets.Scripts.Models.Map.PointInfo"/> out of an X and Y coord.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePointInfo(Il2CppAssets.Scripts.Simulation.SMath.Vector2)">
            <summary>
            Create a <see cref="T:Il2CppAssets.Scripts.Models.Map.PointInfo"/> out of a Vector2.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePointInfo(System.Single,System.Single,System.Single)">
            <summary>
            Create a <see cref="T:Il2CppAssets.Scripts.Models.Map.PointInfo"/> out of X, Y, Z coords.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePointInfo(Il2CppAssets.Scripts.Simulation.SMath.Vector3)">
            <summary>
            Create a <see cref="T:Il2CppAssets.Scripts.Models.Map.PointInfo"/> out of a Vector3.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePathModel(System.String,System.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.SMath.Vector2})">
            <summary>
            Creates a default PathModel out of list of Vector2 points
            </summary>
            <param name="pathName"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreatePathModel(System.String,System.Collections.Generic.List{Il2CppAssets.Scripts.Models.Map.PointInfo})">
            <summary>
            Creates a default PathModel out of list of PointInfos
            </summary>
            <param name="pathName"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MapHelper.CreateSpawner(Il2CppAssets.Scripts.Models.Map.PathModel[])">
            <summary>
            Create a SpawnerModel based off of an array of paths
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.TemplateMod">
            <summary>
            Handles the creation of an empty mod in the Mod Sources folder
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.TemplateMod.CreateModButtonClicked(System.String)">
            <summary>
            Creates an empty mod with the given name
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.MatchScale">
            <summary>
            Component to make this transform continuously match the scale of another transform
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Helpers.MatchScale.transformToCopy">
            <summary>
            Other transform to constantly copy the scale from
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.MatchScale.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.ActionHelper">
            <summary>
            Class for converting actions and functions
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.ActionHelper.CreateFromOptionalFunction(BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Converts a nullable function into an action
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.ActionHelper.CreateFromOptionalFunction``1(BTD_Mod_Helper.Extensions.Function{``0})">
            <summary>
            Converts a nullable function into an action
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.FileIOHelper">
            <summary>
            Class replacing the original functionality of FileIOUtil before BTD6 update 33.0
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Helpers.FileIOHelper.sandboxRoot">
            <summary>
            Same as the original FileIOUtil.sandboxRoot, INCLUDES A SLASH AT THE END
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileIOHelper.GetSandboxPath">
            <summary>
            Same as the original FileIOUtil.GetSandboxPath(), INCLUDES A SLASH AT THE END
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileIOHelper.SaveObject(System.String,Il2CppSystem.Object)">
            <summary>
            Saves an il2cpp object directly to the sandbox path like the original FileIOUtil.SaveObject
            <br/>
            Will also create subdirectories as needed to save the file
            </summary>
            <param name="fileName">Name of file, extension included</param>
            <param name="data"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileIOHelper.LoadObject``1(System.String)">
            <summary>
            Same as the original FileIOUtil.LoadObject
            </summary>
            <param name="fileName">File name within the sandbox directory</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileIOHelper.SaveFile(System.String,System.String)">
            <summary>
            Same as the original FileIOUtil.SaveFile
            </summary>
            <param name="fileName">File name within the sandbox directory</param>
            <param name="text">Text file contents to save</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.FileIOHelper.LoadFile(System.String)">
            <summary>
            Same as the original FileIOUtil.LoadFile
            </summary>
            <param name="fileName">File name within the sandbox directory</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Helpers.ProcessHelper">
            <summary>
            Helper methods for processes
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.ProcessHelper.RestartGame">
            <summary>
            Exits the game and starts a new process after waiting 10 seconds, to ensure no "Another instance is already running" errors
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.ProcessHelper.OpenURL(System.String)">
            <summary>
            Opens a url in the default browser
            </summary>
            <param name="url">URL to open</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Helpers.VanillaSpriteGenerator.GenerateVanillaSprites(System.String,System.String)">
            <summary>
            Generate the VanillaSprites.cs file
            <br/>
            To get the necessary files, from the "...\BloonsTD6\BloonsTD6_Data\StreamingAssets\aa\StandaloneWindows64\Full\" folder, choose:
            <list type="">
                <item>asset_references_assets_all_[...].bundle</item>
                <item>initial_loading_ui_scenes_all_all_[...].bundle</item>
                <item>sprite_atlases_assets_all_[...].bundle</item>
                <item>ui_scenes_all_[...].bundle</item>
            </list>
            in Asset Studio. Then, select all assets of type Sprite, and in the menu do Export -> Dump -> Selected assets
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModByteLoader">
            <summary>
            A class that can be generated by your mod in order to statically load a big complex Model object in your mod, like Ninja Kiwi does with the whole GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader.Generate``1(``0,System.String,System.String,System.String)">
            <summary>
            Generates a ModByteLoader class and corresponding .bytes file within the BloonsTD6 directory
            </summary>
            <param name="model">The model that you want to be able to be statically loaded from bytes</param>
            <param name="loaderFilePath">The absolute file path on your system where the .cs Loader file should end up</param>
            <param name="bytesFilePath">The absolute file path on your system where the bytes file should end up</param>
            <param name="nameSpace">If included, namespace to add to the loader cs file</param>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModByteLoader.m">
            <summary>
            The array of object that NinjaKiwi programmed the loader to utilize
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModByteLoader.Loaded">
            <summary>
            Whether the Result has been Loaded yet
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModByteLoader.LoadTask">
            <summary>
            The Task responsible for loading the bytes in the background
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModByteLoader.Bytes">
            <summary>
            The bytes that will be loaded from
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModByteLoader.BytesFileName">
            <summary>
            The file name of the bytes file within your project.
            <br/>
            <b>Remember to add it as an embedded resource!</b>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModByteLoader.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader.Load">
            <summary>
            Set up the bytes when this is loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader.ConvertLoader``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Converts a generated Loader using normal System data structures to one that uses IL2Cpp ones
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModContent">
            <summary>
            ModContent serves two major purposes:
                <br/>
                1. It is a base class for things that needs to be loaded via reflection from mods and given Ids,
                such as ModTower and ModUpgrade
                <br/>
                2. It is a utility class with methods to access instances of those classes and other resources
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetModMap(System.String)">
            <summary>
            Returns a ModMap based on it's name.
            </summary>
            <param name="mapName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GameModeId``1">
            <summary>
            Gets the ID for the given ModGameMode
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.RoundSetId``1">
            <summary>
            Gets the ID for the given ModRoundSet
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TowerID``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the internal tower name/id for a ModTower
            </summary>
            <param name="top">The top path tier</param>
            <param name="mid">The middle path tier</param>
            <param name="bot">The bottom path tier</param>
            <typeparam name="T">The ModTower type</typeparam>
            <returns>The tower name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTowerModel``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the TowerModel for a ModTower at a specific tier level
            </summary>
            <param name="top">The top path tier</param>
            <param name="mid">The middle path tier</param>
            <param name="bot">The bottom path tier</param>
            <typeparam name="T">The ModTower type</typeparam>
            <returns>The tower name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.UpgradeID``1">
            <summary>
            Gets the internal upgrade name/id for a ModUpgrade
            </summary>
            <typeparam name="T">The ModUpgrade type</typeparam>
            <returns>The upgrade name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CompareTo(BTD_Mod_Helper.Api.ModContent)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.Name">
            <summary>
            The name that will be at the end of the ID for this ModContent, by default the class name
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.Id">
            <summary>
            The id that this ModContent will be given; a combination of the Mod's prefix and the name
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.ID">
            <summary>
            Backing property for ID that's only able to be overriden internally
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModContent.mod">
            <summary>
            The BloonsMod that this content was added by
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Load">
            <summary>
            Used for when you want to programmatically create multiple instances of a given ModContent
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Register">
            <summary>
            Registers this ModContent into the game
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.RegistrationPriority">
            <summary>
            Used to allow some ModContent to Register before or after others
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.Order">
            <summary>
            The order that this ModContent will be loaded/registered in by Mod Helper.
            Useful for changing the ordering that it will appear in in-game relative to other content of this type in your mod,
            or for making certain content load before others like may be necessary for sub-towers.
            Default/0 will use arbitrary ordering.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.RegisterPerFrame">
            <summary>
            How many of this ModContent should it try to register in each frame. Higher numbers could lead to faster but choppier loading.
            </summary>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Load(BTD_Mod_Helper.Api.ModContent)">
            <summary>
            Creates the Instances of a ModContent type within a Mod and adds them to ModContentInstances
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference``1(System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference(System.String)">
            <summary>
            Gets a sprite reference by name for this mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrNull``1(System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod, returning null if the texture hasn't currently been
            loaded instead of an invalid SpriteReference
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrNull(System.String)">
            <summary>
            Gets a sprite reference by name for this mod, returning null if the texture hasn't currently been
            loaded instead of an invalid SpriteReference
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrNull(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod, returning null if the texture hasn't currently been
            loaded instead of an invalid SpriteReference
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrDefault(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod, or if the mod does not include a texture with that name,
            treats it as a vanilla sprite reference
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrDefault``1(System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod, or if the mod does not include a texture with that name,
            treats it as a vanilla sprite reference
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReferenceOrDefault(System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod, or if the mod does not include a texture with that name,
            treats it as a vanilla sprite reference
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreateSpriteReference(System.String)">
            <summary>
            Returns a new SpriteReference that uses the given guid
            </summary>
            <param name="guid">The guid that you'd like to assign to the SpriteReference</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreatePrefabReference(System.String)">
            <summary>
            Returns a new PrefabReference that uses the given guid
            </summary>
            <param name="guid">The guid that you'd like to assign to the PrefabReference</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreateAudioSourceReference(System.String)">
            <summary>
            Returns a new AudioSourceReference that uses the given guid
            </summary>
            <param name="guid">The guid that you'd like to assign to the AudioSourceReference</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreatePrefabReference``1">
            <summary>
            Creates a Prefab Reference for a ModDisplay
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreateSpriteReferenceFromBytes(System.UInt32[])">
            <summary>
            Creates a Sprite reference from the unsigned ints that can be found for a vanilla Sprite in AssetStudio
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a texture's GUID by name for a specific mod
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID``1(System.String)">
            <summary>
            Gets a texture's GUID by name for a specific mod, to be used in SpriteReferences
            <br/>
            Returns null if a Texture hasn't been loaded with that name
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID(System.String)">
            <summary>
            Gets a texture's GUID by name for this mod
            <br/>
            Returns null if a Texture hasn't been loaded with that name
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetId(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets the id of a resource by appending the mod's ID prefix to its name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetId``1(System.String)">
            <summary>
            Gets the id of a resource by appending the mod's ID prefix to its name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetId(System.String)">
            <summary>
            Gets the id of a resource by appending the mod's ID prefix to its name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TextureExists(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets whether a texture with a given name has been loaded by the Mod Helper for a mod
            </summary>
            <param name="bloonsMod">The mod to look in</param>
            <param name="name">The file name of your texture, without the extension</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TextureExists``1(System.String)">
            <summary>
            Gets whether a texture with a given name has been loaded by the Mod Helper for a mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">The mod to look in</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TextureExists(System.String)">
            <summary>
            Gets whether a texture with a given name has been loaded by the Mod Helper for this mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within a mod
            </summary>
            <param name="bloonsMod">The mod that adds this texture</param>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture(System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within this mod
            </summary>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture``1(System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within a mod
            </summary>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureBytes(System.String)">
            <summary>
            Returns the Bytes associated with a texture.
            </summary>
            <param name="fileName">The file name of your texture, without the extension.</param>
            <returns>The bytes associated with the texture.</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureBytes(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Returns the Bytes associated with a texture.
            </summary>
            <param name="bloonsMod">The mod that adds this texture.</param>
            <param name="fileName">The file name of your texture, without the extension.</param>
            <returns>The bytes associated with the texture.</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureBytes``1(System.String)">
            <summary>
            Returns the Bytes associated with a texture.
            </summary>
            <param name="fileName">The file name of your texture, without the extension.</param>
            <returns>The bytes associated with the texture.</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite(BTD_Mod_Helper.BloonsMod,System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within a given mod
            </summary>
            <param name="mod"></param>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite``1(System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within a given mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite(System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within this mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstance``1">
            <summary>
            Gets the singleton instance of a particular ModContent or BloonsMod based on its type
            </summary>
            <typeparam name="T">The type to get the instance of</typeparam>
            <returns>The singleton instance of it</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstance(System.Type)">
            <summary>
            Gets the official instance of a particular ModContent or BloonsMod based on its type
            </summary>
            <param name="type">The type to get the instance of</param>
            <returns>The official instance of it</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a bundle from a mod with the specified name (no file extension)
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle``1(System.String)">
            <summary>
            Gets a bundle from the mod T with the specified name (no file extension)
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle(System.String)">
            <summary>
            Gets a bundle from your mod with the specified name (no file extension)
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetMod(System.String)">
            <summary>
            Gets a BloonsMod by its name, or returns null if none are loaded with that name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.HasMod(System.String)">
            <summary>
            Returns whether a mod with the given name is installed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.HasMod(System.String,BTD_Mod_Helper.BloonsMod@)">
            <summary>
            Returns whether a mod with the given name is installed, and pass it to the out param if it is
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.BloonID``1">
            <summary>
            Gets the ID for the given ModBloon
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetDisplayGUID``1">
            <summary>
            Gets the GUID (thing that should be used in the display field for things) for a specific ModDisplay
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetContent``1">
            <summary>
            Gets all loaded ModContent objects that are T or a subclass of T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstances``1">
            <summary>
            Gets all loaded ModContent objects that are exactly of type T 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Find``1(System.String)">
            <summary>
            Finds the loaded ModContent with the given Id and type T
            </summary>
            <param name="id"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TryFind``1(System.String,``0@)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.ModContent.Find``1(System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioClip(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets an AudioClip from a mod by its name (no file extension included)
            </summary>
            <param name="mod">The mod</param>
            <param name="name">Sound name (no .wav)</param>
            <returns>a playable AudioClip</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioClip``1(System.String)">
            <summary>
            Gets an AudioClip from a mod by its name (no file extension included)
            </summary>
            <param name="name">Sound name (no .wav)</param>
            <typeparam name="T">The mod</typeparam>
            <returns>a playable AudioClip</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioClip(System.String)">
            <summary>
            Gets an AudioClip from this mod by its name (no file extension included)
            </summary>
            <param name="name">Sound name (no .wav)</param>
            <returns>a playable AudioClip</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioSourceReference(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets an AudioSource reference for a given sound within a mod
            </summary>
            <param name="mod"></param>
            <param name="name">Sound name (no .wav)</param>
            <returns>An AudioSoundReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreateAudioSourceReference``1(System.String)">
            <summary>
            Gets an AudioSource reference for a given sound within a mod
            </summary>
            <param name="name">Sound name (no .wav)</param>
            <typeparam name="T">The mod</typeparam>
            <returns>An AudioSoundReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioSourceReference``1(System.String)">
            <summary>
            Gets an AudioSource reference for a given sound within a mod
            </summary>
            <param name="name">Sound name (no .wav)</param>
            <typeparam name="T">The mod</typeparam>
            <returns>An AudioSoundReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetAudioSourceReference(System.String)">
            <summary>
            Gets an AudioSource reference for a given sound within this mod
            </summary>
            <param name="name">Sound name (no .wav)</param>
            <returns>An AudioSoundReference</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModContentTask">
            <summary>
            Initial task to register ModContent from other mods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContentTask.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContentTask.Load">
            <summary>
            Don't load this like a normal task
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContentTask.Coroutine">
            <summary>
            Registers ModContent from other mods
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey">
            <summary>
            ModSetting for a customizable Hotkey
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.#ctor(UnityEngine.KeyCode,Il2CppAssets.Scripts.Unity.UI_New.InGame.HotkeyModifier)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.JustPressed">
            <summary>
            Returns whether the Hotkey was pressed down on this frame
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.IsPressed">
            <summary>
            Returns whether the Hotkey is currently being pressed / held
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.JustReleased">
            <summary>
            Returns whether the Hotkey just went from being pressed to not being pressed on this frame
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.OnSave">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.CreateComponent">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey.op_Implicit(UnityEngine.KeyCode)~BTD_Mod_Helper.Api.ModOptions.ModSettingHotkey">
            <summary>
            Creates a new ModSettingHotkey from a KeyCode
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSetting`1">
            <summary>
            Class for keeping track of a variable for a Mod that can be changed in game via the Mod Settings menu
            </summary>
            <typeparam name="T">The type that this ModSetting holds</typeparam>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.onValueChanged">
            <summary>
            Action to call when the value changes within the menu
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.onSave">
            <summary>
            Action to call when the value is saved, i.e. once they actually close the menu
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.customValidation">
            <summary>
            Will only save the result and run onSave if this custom function validates the value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.OnValueChanged">
            <summary>
            Old onValueChanged. 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.#ctor(`0)">
            <summary>
            Constructs a new ModSetting for the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.GetValue">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.GetDefaultValue">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.OnSave">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSetting">
            <summary>
            Base class for a ModSetting without the generics
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.displayName">
            <summary>
            The exact name displayed for this mod setting. If unset, will use the variable name.
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.description">
            <summary>
            The description / explanation of this mod setting
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.icon">
            <summary>
            Icon to display alongside the setting
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.modifyOption">
            <summary>
            Action to modify the ModHelperOption after it's created
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.category">
            <summary>
            The category that this is part of, or null
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting.requiresRestart">
            <summary>
            Indicates to players that the effects of changing this setting will only take place after a restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.GetValue">
            <summary>
            Gets the current value that this ModSetting holds
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.GetDefaultValue">
            <summary>
            Gets the default value for this ModSetting
            </summary>
            <returns>The default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.SetValue(System.Object)">
            <summary>
            Sets the current value of this ModSetting
            </summary>
            <param name="val">The new value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.CreateComponent">
            <summary>
            Constructs a visual ModHelperComponent for this ModSetting
            </summary>
            <returns>The created ModHelperComponent</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.OnSave">
            <summary>
            Validates the current value using the customValidation function, if there is one.
            If there were no issues, performs the onSave action
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.CreateBaseOption">
            <summary>
            Creates a base ModHelperOption component based on the name, description and icon of this
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingBool">
            <summary>
            ModSetting class for a boolean value
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.button">
            <summary>
            Whether this should display as an Enabled/Disabled button instead of a checkbox
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.disabledButton">
            <summary>
            The sprite to use for the button when it's disabled, RedBtnLong by default
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.disabledText">
            <summary>
            The text that the button should have when it's disabled, if this is a button
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.enabledButton">
            <summary>
            The sprite to use for the button when it's enabled, GreenBtnLong by default
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.enabledText">
            <summary>
            The text that the button should have when it's enabled, if this is a button
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.modifyButton">
            <summary>
            Action to modify the ModHelperCheckbox after it's created
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.modifyCheckbox">
            <summary>
            Action to modify the ModHelperCheckbox after it's created
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.IsButton">
            <summary>
            Old way to do a button before ModSettingButton was a thing
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.op_Implicit(System.Boolean)~BTD_Mod_Helper.Api.ModOptions.ModSettingBool">
            <summary>
            Create a new ModSetting bool with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingBool)~System.Boolean">
            <summary>
            Gets the current value out of a ModSettingBool
            </summary>
            <param name="modSettingBool"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingButton">
            <summary>
            ModSetting for adding a button in the settings that performs a given action, with the setting just tracking
            the number of times that the button has been pressed.
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.action">
            <summary>
            The action that this button performs
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.buttonText">
            <summary>
            The text that will appear on the button, "Dew It" by default
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.buttonSprite">
            <summary>
            The sprite to use for the button, BlueBtnLong by default
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.modifyButton">
            <summary>
            Action to modify the ModHelperButton after it's created
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.#ctor">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.#ctor(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingButton.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory">
            <summary>
            Category of mod settings
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.displayName">
            <summary>
            Name of the category
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.icon">
            <summary>
            Icon of the category, if any
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.order">
            <summary>
            Order of this category in relation to other categories. A setting not having a category will have order = 0
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.collapsed">
            <summary>
            Whether this category is currently collapsed / hiding its elements
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.modifyCategory">
            <summary>
            Action to modify the ModHelperCategory after it's created
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.#ctor(System.String)">
            <summary>
            Creates a new ModSettingCategory with the given displayName
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.Create">
            <summary>
            Creates the visual ModHelperCategory for this option
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingCategory)~System.String">
            <summary>
            Gets the name from a category
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingCategory.op_Implicit(System.String)~BTD_Mod_Helper.Api.ModOptions.ModSettingCategory">
            <summary>
            Creates a new category with the given name
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble">
            <summary>
            ModSetting for a decimal value
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.minValue">
            <summary>
            Old way of doing min
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.maxValue">
            <summary>
            Old way of doing max
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.isSlider">
            <summary>
            Old way of doing slider
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.stepSize">
            <summary>
            Step size to use for slider, or how much to round the input
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.#ctor(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.op_Implicit(System.Double)~BTD_Mod_Helper.Api.ModOptions.ModSettingDouble">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingDouble)~System.Double">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingDouble)~System.Single">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.ToString(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.FromString(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.Validation">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.ToFloat(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.FromFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingDouble.StepSize">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1">
            <summary>
            ModSetting for an Enum value
            </summary>
            <typeparam name="T">The Enum in question</typeparam>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.modifyDropdown">
            <summary>
            Action to modify the ModHelperDropdown after it's created
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.labelFunction">
            <summary>
            A function to apply to each enum value to get the label for it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.op_Implicit(`0)~BTD_Mod_Helper.Api.ModOptions.ModSettingEnum{`0}">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingEnum{`0})~`0">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingEnum`1.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingFile">
            <summary>
            ModSetting for selecting a specific file on the host computer
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.filter">
            <summary>
            https://github.com/mlabbe/nativefiledialog/blob/master/README.md#file-filter-syntax
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.op_Implicit(System.String)~BTD_Mod_Helper.Api.ModOptions.ModSettingFile">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingFile)~System.String">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFile.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder">
            <summary>
            ModSetting for selecting a specific folder on the host computer
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.#ctor(System.Environment.SpecialFolder)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.op_Implicit(System.String)~BTD_Mod_Helper.Api.ModOptions.ModSettingFolder">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingFolder)~System.String">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingFolder.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingInt">
            <summary>
            ModSetting for int values
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.minValue">
            <summary>
            Old way of doing min
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.maxValue">
            <summary>
            Old way of doing max
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.isSlider">
            <summary>
            Old way of doing slider
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.op_Implicit(System.Int32)~BTD_Mod_Helper.Api.ModOptions.ModSettingInt">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingInt)~System.Int32">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.ToString(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.FromString(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.Validation">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.ToFloat(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingInt.FromFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1">
            <summary>
            ModSetting class for a number, implying it can have a min/max value, and be an input or a slider
            </summary> 
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.min">
            <summary>
            The lowest allowed value, or null for unbounded
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.max">
            <summary>
            The largest allowed value, or null for unbounded
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.slider">
            <summary>
            Whether this displays as a slider
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.sliderSuffix">
            <summary>
            Suffix to add to the end of the slider label
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.modifySlider">
            <summary>
            Action to modify the ModHelperSlider after it's created
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.modifyInput">
            <summary>
            Action to modify the ModHelperInputField after it's created
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.StepSize">
            <summary>
            Step Size for the slider 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.Validation">
            <summary>
            Validation to use for the input component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.ToString(`0)">
            <summary>
            Turn the value into a string for labels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.FromString(System.String)">
            <summary>
            Get the value from the string input component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.ToFloat(`0)">
            <summary>
            Conversion of the type to a float for the slider component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.FromFloat(System.Single)">
            <summary>
            Conversion of the type from a float for the slider component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingNumber`1.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingString">
            <summary>
            ModSetting for a string value
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.modifyInput">
            <summary>
            Action to modify the ModHelperInputField after it's created
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.None">
            <summary>
            Allow all characters
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Alphanumeric">
            <summary>
            Allow only alphanumeric characters
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Decimal">
            <summary>
            Allow only valid decimals
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Integer">
            <summary>
            Allow only valid integers
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.validation">
            <summary>
            InputField validation, use one of the ModSettingString.[thing] constants 
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.characterValidation">
            <summary>
            Validation for the input field, determining which characters are allowed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.op_Implicit(System.String)~BTD_Mod_Helper.Api.ModOptions.ModSettingString">
            <summary>
            Constructs a new ModSetting with the given value as default
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.op_Implicit(BTD_Mod_Helper.Api.ModOptions.ModSettingString)~System.String">
            <summary>
            Gets the current value out of a ModSetting
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.CreateComponent">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.PreLoadResourcesTask">
            <summary>
            Task to preload images and save them in the Unity scene so they can be accessed quickly
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.PreLoadResourcesTask.Load">
            <summary>
            Don't load this like a normal task
            </summary>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Scenarios.ModGameMode">
            <summary>
            Class for a custom GameMode that will be added to the modes screen when starting a new match
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.RegistrationPriority">
            <summary>
            Registers after Round Sets
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.DisplayNamePlural">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.Difficulty">
            <summary>
            Where this Mode should show up within the Mode Select screen. Use DifficultyType.[name]
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.BaseGameMode">
            <summary>
            The id of the existing GameMode to use as a base. Use GameModeType.[name]
            If this GameModeType.None, empty, or null, then an empty base will be used
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.PreApplies">
            <summary>
            Whether this GameMode ...
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.Icon">
            <summary>
            The Icon for the Button for this Mode within the UI, by default looking for the same name as the file
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModGameMode.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModGameMode.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModGameMode.ModifyBaseGameModeModel(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Implemented by a ModGameMode to modify the base game mode, for instance by adding or removing mutator mods
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModGameMode.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModGameMode.ModifyGameModel(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Modifies the GameModel that's used for matches played with this mode
            </summary>
            <param name="gameModel"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Scenarios.ModMap">
            <summary>
            Class for creating custom Maps easier. 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.MapImageName">
            <summary>
            The name of the Image file that would be the actual map. By default
            this will be set to be the same as <see cref="P:BTD_Mod_Helper.Api.ModContent.Name"/>. Change this
            if your map has a different file name than the name of the map itself.
            <br/><br/>Example: Castle.png
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.Difficulty">
            <summary>
            The difficulty of this map.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.CoopDivision">
            <summary>
            
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.MapMusic">
            <summary>
            
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.AutoUnlockMap">
            <summary>
            Set to true if you want this map to be unlocked by default.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.MapWideBloonSpeed">
            <summary>
            The map-wide modifier for all Bloons' speed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Scenarios.ModMap.EnableRain">
            <summary>
            Set to true if you want Rain enabled in this map.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.GetMapDetails">
            <summary>
            Get's the map details for this map. Override this method if you want extra customization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.Register">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.GetSpriteReference">
            <summary>
            Returns the sprite reference of this map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.GetTexture">
            <summary>
            Returns the texture of this map. The first time it's loaded it will automatically resize to fit the game.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.AddPath(System.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.SMath.Vector2})">
            <summary>
            Use this to add a path to your map. 
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.AddAreaModel(Il2CppAssets.Scripts.Models.Map.AreaType,System.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.SMath.Vector2})">
            <summary>
            Add an area model to this path.
            </summary>
            <param name="type"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.IsCustomMap(System.String)">
            <summary>
            Returns whether or not a map is a custom map, based off of it's name.
            </summary>
            <param name="mapName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Scenarios.ModMap.IsCustomMap(System.String,BTD_Mod_Helper.Api.Scenarios.ModMap@)">
            <summary>
            Returns whether or not a map is a custom map, based off of it's name.
            </summary>
            <param name="mapName"></param>
            <param name="map">The custom map, if found</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHero">
            <summary>
            Class for adding a custom Hero to the game. Use alongside <see cref="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel"/> to give multiple levels.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.DontAddToShop">
            <summary>
            Heroes aren't in the default shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.ParagonMode">
            <summary>
            No paragon heroes
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BaseTower">
            <summary>
            The default hero (or tower) to base your hero off of
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.TowerSet">
            <summary>
            Heroes can only be in the Hero tower set
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.TopPathUpgrades">
            <summary>
            Putting all the hero level upgrades in the top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.MiddlePathUpgrades">
            <summary>
            No other upgrade paths used
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BottomPathUpgrades">
            <summary>
            No other upgrade paths used
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.TowerTiers">
            <summary>
            Heroes tower tiers are always Level-0-0
            </summary>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.NameStyle">
            <summary>
            The other hero that has the same colored name in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.GlowStyle">
            <summary>
            The other hero that has the same glow color in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BackgroundStyle">
            <summary>
            The other hero that has the same background color in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Button">
            <summary>
            The png name of the Button icon for this hero in the UI, by default Name-Button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.ButtonReference">
            <summary>
            The exact sprite reference used for the button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Square">
            <summary>
            The name of the png to try to find for the new hero select screen button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.SquareReference">
            <summary>
            The SpriteReference for this hero's Square icon in the new revamped HeroScreen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.SelectScreenPortraits">
            <summary>
            If you want to manually override which portraits your hero uses in the select screen, mess with this
            <br/>
            By default will find any <see cref="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.PortraitReference"/>s defined in your <see cref="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel"/>s
            <br/>
            The SpriteReference is the actual image that will be displayed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.MaxLevel">
            <summary>
            The total number of levels this hero has. Do not set this to anything other than number of ModHeroLevels
            that you've actually created for your Hero.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.XpRatio">
            <summary>
            XpRatio to use when determining the default xp costs of the levels.
            <br/>
            All four base heroes (Quincy, Gwendolin, Striker Jones, Obyn Greenfoot) as well as Etienne have an XP ratio of 1x.
            <br/>
            Ezili, Pat Fusty, Admiral Brickell, and Sauda have a 1.425x XP ratio.
            <br/>
            Benjamin and Psi have an XP ratio of 1.5x.
            <br/>
            Captain Churchill and Adora have a ratio of 1.71x.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Title">
            <summary>
            The short description that appears under the name of the hero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Level1Description">
            <summary>
            The description to use for the first level of your hero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Abilities">
            <summary>
            The total number of abilities that this hero has as max level
            <br/>
            OBSOLETE: No longer required to manually specify
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.GetFontMaterial(System.Collections.Generic.Dictionary{System.String,Il2CppAssets.Scripts.Data.Skins.SkinData})">
            <summary>
            Gets the font material for the default SkinData
            </summary>
            <param name="skinsByName">Existing hero skins by their skin/tower name</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.GetBackgroundBanner(System.Collections.Generic.Dictionary{System.String,Il2CppAssets.Scripts.Data.Skins.SkinData})">
            <summary>
            Gets the Background Banner for the default SkinData
            </summary>
            <param name="skinsByName">Existing hero skins by their skin/tower name</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.GetBackgroundColor(System.Collections.Generic.Dictionary{System.String,Il2CppAssets.Scripts.Data.Skins.SkinData})">
            <summary>
            Gets the background color for the default SkinData
            </summary>
            <param name="skinsByName">Existing hero skins by their skin/tower name</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.CreateDefaultSkin(System.Collections.Generic.Dictionary{System.String,Il2CppAssets.Scripts.Data.Skins.SkinData})">
            <summary>
            Creates the SkinData for the default tower
            </summary>
            <param name="skinsByName">Existing hero skins by their skin/tower name</param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.SelectSound">
            <summary>
            Sound to play when you select this hero in the hero select screen, the sound must be registered in the game for it to play
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.GetHeroIndex(System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.HeroDetailsModel})">
            <summary>
            The index to add this hero at in relation to other heroes
            </summary>
            <param name="heroSet"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel">
            <summary>
            Class representing the UpgradeModel and changes for a particular Level for a ModHero
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHeroLevel.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Name">
            <summary>
            Internal naming scheme for hero levels
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.NeedsConfirmation">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.ConfirmationTitle">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.ConfirmationBody">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Icon">
            <summary>
            Hero upgrades don't have individual icons
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.IconReference">
            <summary>
            Hero upgrades don't have individual icons
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Tier">
            <summary>
            The upgrade's tier is the hero's level.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Cost">
            <summary>
            Hero upgrades have no cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.XpCost">
            <summary>
            How much XP the hero needs to get to go from the previous level to this level.
            <br/>
            Default is calculated the same way Ninja Kiwi does it using 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Tower">
            <summary>
            The ModTower is the ModHero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Path">
            <summary>
            All hero upgrades count as top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Level">
            <summary>
            What level this 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Hero">
            <summary>
            The tower that this is an upgrade for
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.AbilityName">
            <summary>
            DisplayName field of the AbilityModel added at this level, if any
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.AbilityDescription">
            <summary>
            Description of the ability added at this level, if any
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Portrait">
            <summary>
            The filename without extension for the portrait this Level should make the hero start using
            <br/>
            By default, the <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.Portrait"/> of the <see cref="T:BTD_Mod_Helper.Api.Towers.ModHero"/> with the <see cref="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Level"/> appended,
            e.g. "IndustrialFarmer-Portrait3"
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel`1">
            <summary>
            Convenient generic class for specifying the ModHero that this ModHeroLevel is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel`1.Hero">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade">
            <summary>
            Defines the Paragon Upgrade for a ModTower. Remember to set the <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.ParagonMode"/> property.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.AssignToModTower">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Name">
            <summary>
            Specifically use the paragon upgrade naming scheme. No overriding because that apparently causes issues.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ID">
            <summary>
            Override the ID to not have the prefix. It's necessary to work, and there's not a good way for
            different paragon mods to coexist anyway
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Path">
            <summary>
            No changing of ModParagonUpgrade path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Tier">
            <summary>
            No changing of ModParagonUpgrade tier
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Load">
            <summary>
            No loading of multiple ModParagonUpgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ParagonTowerModel">
            <summary>
            The ParagonTowerModel that this will use as a base. You don't need to worry about displayDegreePaths
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.RemoveAbilities">
            <summary>
            By default, remove any abilities from the Paragon tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ModifyPowerDegreeMutator(Il2CppAssets.Scripts.Models.Towers.Behaviors.ParagonTowerModel.PowerDegreeMutator,System.Single,System.Int32)">
            <summary>
            Modify the PowerDegreeMutator of the Paragon
            </summary>
            <param name="powerDegreeMutator"></param>
            <param name="investment"></param>
            <param name="degree"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.OnDegreeSet(Il2CppAssets.Scripts.Simulation.Towers.Tower,System.Int32)">
            <summary>
            Method to modify the Simulation Tower once its Degree has been set
            </summary>
            <param name="tower"></param>
            <param name="degree"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.GetUpgradeModel">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade`1">
            <summary>
            A convenient generic class for specifying the ModTower that this ModParagonUpgrade is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModSubTower">
            <summary>
            Helper class for making a subtower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.Cost">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.TopPathUpgrades">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.MiddlePathUpgrades">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.BottomPathUpgrades">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.DontAddToShop">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower.Order">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModSubTower`1">
            <summary>
            Helper class for making a subtower for a specific other ModTower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower`1.Order">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModSubTower`1.TowerSet">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTower">
            <summary>
            Class for adding a custom Tower to the game. Use alongside <see cref="T:BTD_Mod_Helper.Api.Towers.ModUpgrade"/> to define its upgrades,
            and optionally <see cref="T:BTD_Mod_Helper.Api.Display.ModTowerDisplay"/> to define custom displays for it.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.ParagonMode">
            <summary>
            Defines whether / how this ModTower has a Paragon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.#ctor">
            <summary>
            Constructor for ModTower, used implicitly by ModContent.Create
            </summary>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetDefaultTowerModel(System.Int32[])">
            <summary>
            Gets the base TowerModel for this Tower to use at the given tiers
            </summary>
            <returns>The 0-0-0 TowerModel for this Tower</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetTowerIndex(System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            When adding this tower to the shop, gets the index at which to add the tower relative to the existing ones.
            <br/>
            By default, the tower will be put at the end of the TowerSet category that it's in.
            </summary>
            <param name="towerSet"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetUpgradePathModel(BTD_Mod_Helper.Api.Towers.ModUpgrade,System.Int32[])">
            <summary>
            Creates an UpgradePathModel for a particular upgrade and new tiers
            </summary>
            <param name="modUpgrade">The upgrade</param>
            <param name="newTiers">The new desired tiers of the tower</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.MaxUpgradePips(Il2CppAssets.Scripts.Unity.Bridge.TowerToSimulation,System.Int32,System.Int32)">
            <summary>
            Allows you to override how many possible Upgrade pips it should show as being possible for a tower to get 
            </summary>
            <param name="tower">The TowerToSimulation</param>
            <param name="path">What path this is for</param>
            <param name="defaultMax">The default maximum</param>
            <returns>The new maximum amount of upgrade pips, or null for no change</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.IsUpgradePathClosed(Il2CppAssets.Scripts.Unity.Bridge.TowerToSimulation,System.Int32,System.Boolean)">
            <summary>
            Allows you to override whether an UpgradePath should be closed or not for a tower
            </summary>
            <param name="tower">The TowerToSimulation</param>
            <param name="path">What path this is for</param>
            <param name="defaultClosed">Whether it'd be naturally closed or not</param>
            <returns>Whether the upgrade path should be closed, or null for no change</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetBaseTowerModel(System.Int32[])">
            <summary>
            Allows you to change the base TowerModel your tower will use at different tiers. Note that you'd need to be
            careful if you entirely changed the base tower you're working with at different tiers, as it will still attempt
            to apply all the appropriate upgrades. If you would like a ModUpgrade to only have an effect at a given tier,
            you could do something like:
            <code>
            public override void ApplyUpgrade(TowerModel towerModel) {
                if (towerModel.tiers[Path] != Tier) return;
                ...
            }
            </code>
            </summary>
            <param name="tiers">Length 3 array of Top/Mid/Bot tiers</param>
            <returns>The base TowerModel to use</returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.RegistrationPriority">
            <summary>
            ModTowers register third
            </summary>
            <exclude/>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Portrait">
            <summary>
            The Portrait for the 0-0-0 tower, by default "[Name]-Portrait"
            <br/>
            (Name of .png or .jpg, not including file extension)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Icon">
            <summary>
            The Icon for the Tower's purchase button, by default "[Name]-Icon"
            <br/>
            (Name of .png or .jpg, not including file extension)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.PortraitReference">
            <summary>
            If you're not going to use a custom .png for your Portrait, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel">
            <summary>
            Whether this Tower should display 2-dimensionally, and search for png images
            <br/>
            <seealso cref="P:BTD_Mod_Helper.Api.Towers.ModTower.PixelsPerUnit"/>
            <seealso cref="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DTexture(System.Int32[])"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.PixelsPerUnit">
            <summary>
            For 2D towers, the ratio between pixels and display units. Higher number -> smaller tower.
            <seealso cref="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel"/>
            <seealso cref="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DTexture(System.Int32[])"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.DontAddToShop">
            <summary>
            Makes this Tower not actually add itself to the shop, useful for making subtowers
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.PRIMARY">
            <summary>
            The string to use for the Primary tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.MAGIC">
            <summary>
            The string to use for the Magic tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.MILITARY">
            <summary>
            The string to use for the Military tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.SUPPORT">
            <summary>
            The string to use for the Support tower set
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.TowerSet">
            <summary>
            The family of Monkeys that your Tower should be put in.
            <br/>
            For now, just use one of the default constants provided of PRIMARY, MILITARY, MAGIC, or SUPPORT.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.BaseTower">
            <summary>
            The id of the default BTD Tower that your Tower is going to be copied from by default.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Cost">
            <summary>
            The in game cost of this tower (on Medium difficulty)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.TopPathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 1st / top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.MiddlePathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 2nd / middle path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.BottomPathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 3rd / bottom path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.AlwaysIncludeInChallenge">
            <summary>
            Whether to always make this tower be included in challenges / Bosses / Odysseys etc
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.ShopTowerCount">
            <summary>
            How many of this tower you can buy at once during a game. By default -1 for no limit.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.ModifyBaseTowerModel(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Implemented by a ModTower to modify the base tower model before applying any/all ModUpgrades
            <br/>
            Things like the TowerModel's name, cost, tier, and upgrades are already taken care of before this point
            </summary>
            <param name="towerModel">The Base Tower Model</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.ModifyTowerModelForMatch(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Collections.Generic.IReadOnlyList{Il2CppAssets.Scripts.Models.ModModel})">
            <summary>
            Further modifies this tower when you go into a new match.
            Useful for making conditional effects happen based on settings.
            <br/>
            The normal ApplyUpgrade effects for all upgrades will have already been applied on game start,
            so this will simply modify all the TowerModels for this ModTower.
            </summary>
            <param name="towerModel">The Base Tower Model</param>
            <param name="gameModes">What GameModes are active for the match</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.TowerTiers">
            <summary>
            Returns all the valid tiers for the TowerModels of this Tower
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.IsValidCrosspath(System.Int32[])">
            <summary>
            Another way to modify the allowable crosspaths for your tower. By default, checks that the highest tier is at
            most 5, the next highest is at most 2, and the last one is 0
            <br/>
            Used in the default implementation of <see cref="M:BTD_Mod_Helper.Api.Towers.ModTower.TowerTiers"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DTexture(System.Int32[])">
            <summary>
            If this is a 2D tower, gets the name of the .png to use for a given set of tiers
            <br/>
            Default Behavior Example: For CardMonkey with tiers 2-3-0, it would try (in order):
            CardMonkey-230, CardMonkey-X3X, CardMonkey-2XX, CardMonkey
            <seealso cref="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel"/>
            <see cref="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DScale(System.Int32[])"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DScale(System.Int32[])">
            <summary>
            Gets the scale to use for a 2d tower at the given tiers
            <seealso cref="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel"/>
            <seealso cref="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DTexture(System.Int32[])"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetPortraitReferenceForTiers(System.Int32[])">
            <summary>
            Gets the portrait reference this tower should use for the given tiers
            <br/>
            Looks for the highest tier <see cref="T:BTD_Mod_Helper.Api.Towers.ModUpgrade"/> this tower has that defined a <see cref="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.PortraitReference"/>,
            falling back to the tower's own base <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.PortraitReference"/> by default.
            </summary>
            <param name="tiers"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTower`1">
            <summary>
            A convenient generic class for specifying the ModTowerSet that a ModTower uses
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower`1.TowerSet">
            <summary>
            The custom tower set that this ModTower uses
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ParagonMode">
            <summary>
            Defines the Paragon behavior for a ModTower
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.None">
            <summary>
            Don't generate a Paragon
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.Base000">
            <summary>
            Generate a Paragon by applying the ModParagonUpgrade to the 000 version of the tower
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.Base555">
            <summary>
            Generate a Paragon by applying the ModParagonUpgrade to the 555 version of the tower
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTowerHelper">
            <summary>
            Class with helper methods for TowerModels / ModTowers
            <br/>
            Mostly used internally
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerHelper.CreateTowerModel(System.String,System.String,Il2CppAssets.Scripts.Models.TowerSets.TowerSet)">
            <summary>
            Creates and returns an empty TowerModel
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTowerSet">
            <summary>
            A custom collection of ModTowers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.GetTowerStartIndex(System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            The position to start placing ModTowers of this ModTowerSet in relation to other towers
            <br/>
            By default, will determine the position based on GetTowerSetIndex
            <br/>
            </summary>
            <param name="towerSet">The set of all current tower details</param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.TowerSetInt">
            <summary>
            Internal int enum value used for this ModdedTowerSet
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Set">
            <summary>
            TowerSet enum for this modded TowerSet
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.RegistrationPriority">
            <summary>
            ModTowerSets register before ModTowers, alongside ModUpgrades
            </summary>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.DisplayNamePlural">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Description">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Container">
            <summary>
            Name of .png file for the background for towers in the Monkeys menu and the in game shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerReference">
            <summary>
            SpriteReference for the container
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerLarge">
            <summary>
            Name of .png file for the background used for non-paragon upgrades in the Upgrade screen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerLargeReference">
            <summary>
            SpriteReference for the large container
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Button">
            <summary>
            Name of .png file for the group button used in the Monkeys menu
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ButtonReference">
            <summary>
            SpriteReference for the button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Portrait">
            <summary>
            Name of .png file for the background for in game portraits
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.PortraitReference">
            <summary>
            SpriteReference for the portrait
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.GetTowerSetIndex(System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerSet})">
            <summary>
            Where to place this ModTowerSet in relation to other towerSets. By default at the end.
            <br/>
            </summary>
            <param name="towerSets">The current towerSets that already exist</param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.AllowInRestrictedModes">
            <summary>
            Whether this Tower Set should still be allowed to appear in Primary Only, Military Only, Magic Only
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.Load">
            <summary>
            No loading multiple instances of a ModTowerSet
            </summary>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModUpgrade">
            <summary>
            A class used to create an Upgrade for a Tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.RegistrationPriority">
            <summary>
            ModUpgrades register second
            </summary>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.AssignToModTower">
            <summary>
            Assigns this upgrade to its ModTower
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.TOP">
            <summary>
            Path ID for the Top path
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.MIDDLE">
            <summary>
            Path ID for the Middle path
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.BOTTOM">
            <summary>
            Path ID for the Bottom path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Portrait">
            <summary>
            The file name without extension for the Portrait for this upgrade
            <br/>
            By default is the same file name as the tower followed by -Portrait
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Icon">
            <summary>
            The file name without extension for the Icon for this upgrade
            <br/>
            The Tower follows the default Bloons method of picking a Portrait: choose the highest tier upgrade, and if
            there's a tie, choose Mid > Top > Bot (for whatever reason)
            <br/>
            By default is the same file name as the tower followed by -Icon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.PortraitReference">
            <summary>
            If you're not going to use a custom .png for your Portrait, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Priority">
            <summary>
            Custom priority to make this upgrade applied sooner (increased priority) or later (decreased priority)
            when the TowerModel is being constructed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.NeedsConfirmation">
            <summary>
            Whether this upgrade requires a confirmation popup
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.ConfirmationTitle">
            <summary>
            The title for the confirmation popup, if needed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.ConfirmationBody">
            <summary>
            The body text for the confirmation popup, if needed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.XpCost">
            <summary>
            Xp Cost for the upgrade. Meaningless usually because custom heroes automatically are automatically unlocked.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Path">
            <summary>
            The upgrade path
            Use <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.TOP"/>, <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.MIDDLE"/>, <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.BOTTOM"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Tier">
            <summary>
            The upgrade tier, 1 for Tier 1 Upgrades, 2 for Tier 2, etc...
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Cost">
            <summary>
            How much the upgrade costs on Medium difficulty
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Tower">
            <summary>
            The tower that this is an upgrade for
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.ApplyUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Apply the effects that this upgrade has onto a TowerModel
            <br/>
            The TowerModel's tier(s), applied upgrades and other info will already be correct, so this is mostly about
            changing the TowerModel's behavior
            <br/>
            The default ordering of upgrade application is to do them in ascending order of tier, doing Top then Mid
            then Bot at each tier. This can be changed using <see cref="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Priority"/>.
            </summary>
            <param name="towerModel">The Tower Model</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.ApplyUpgradeForMatch(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Collections.Generic.IReadOnlyList{Il2CppAssets.Scripts.Models.ModModel})">
            <summary>
            Make this upgrade apply additional effects on a towerModel when you go into a new match.
            Useful for making conditional effects happen based on settings.
            <br/>
            The normal ApplyUpgrade effects for all upgrades will have already been applied on game start,
            so this will simply modify all the TowerModels for this ModTower that have this upgrade.
            </summary>
            <param name="towerModel">The Tower Model</param>
            <param name="gameModes">What GameModes are active for the match</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.EarlyApplyUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Apply effects to this Tower Model before all other ApplyUpgrade and LateApplyUpgrade effects have happened
            <br/>
            Otherwise, usual priority / ordering rules still apply
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.LateApplyUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Apply effects to this Tower Model after all the other EarlyApplyUpgrade and ApplyUpgrade effects have happened
            <br/>
            Otherwise, usual priority / ordering rules still apply
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.GetUpgradeModel">
            <summary>
            If you really need to override the way that the ModUpgrade makes its UpgradeModel, go ahead
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.RestrictUpgrading(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Allows you to dynamically allow an upgrade to not be purchasable based on the InGame values of a Tower
            </summary>
            <param name="tower"></param>
            <returns>If </returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModUpgrade`1">
            <summary>
            A convenient generic class for specifying the ModTower that this ModUpgrade is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaParagon">
            <summary>
            Dummy ModTower that can be used to make a Paragon for a base tower.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.DontAddToShop">
            <summary>
            No paragons in shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.ParagonMode">
            <summary>
            Not using the custom tower paragon mode
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Order">
            <summary>
            Order doesn't apply here
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TowerSet">
            <summary>
            Same towerSet as base tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Cost">
            <summary>
            Handled by upgrade cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TopPathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.MiddlePathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.BottomPathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.ModifyBaseTowerModel(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Tower gets modified in the Paragon upgrade
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TowerTiers">
            <summary>
            Doesn't generate any of the tower on its own
            </summary>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Portrait">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Icon">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.IconReference">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.PortraitReference">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Description">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.GetTowerIndex(System.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            Tower index doesn't apply
            </summary>
            <param name="towerSet"></param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Name">
            <summary>
            Name override
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaTower">
            <summary>
            ModContent class for modifying all TowerModels for a given Tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaTower.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaTower.GetAffected(Il2CppAssets.Scripts.Models.GameModel)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.TowerId">
            <summary>
            The base id of the Tower that this should modify all TowerModels of
            <br/>
            Use TowerType.[tower]
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.DisplayNamePlural">
            <summary>
            Change the name of it when it's plural
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.TowerSet">
            <summary>
            Change the TowerSet that this tower is part of. Also handles moving its place within the shop.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.Cost">
            <summary>
            Changes the base cost
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaTower`1">
            <summary>
            Helper class for changing a vanilla tower to be part of a modded tower set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade">
            <summary>
            ModContent class for modifying all TowerModels that have a given upgrade applied to them
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.Register">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.Apply(Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Change the UpgradeModel for this upgrade
            </summary>
            <param name="upgradeModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.GetAffected(Il2CppAssets.Scripts.Models.GameModel)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.Cost">
            <summary>
            Changes the base cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.UpgradeId">
            <summary>
            The id of the Upgrade that this should modify all TowerModels that use
            <br/>
            Use UpgradeType.[upgrade]
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaContent">
            <summary>
            Class for changing Vanilla content within the game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.AffectBaseGameModel">
            <summary>
            Whether this should only modify the Towers In-Game, or also affect the default GameModel outside a game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.GetAffectedModels(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Gets the TowerModels that this will affect in the GameModel
            </summary>
            <param name="gameModel"></param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Name">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.DisplayName">
            <summary>
            Change the name of it
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Description">
            <summary>
            Change the description of it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Apply(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Applies the modifications to the vanilla content
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Apply(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Applies the modifications to the vanilla content
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.ShouldApply">
            <summary>
            Whether this should apply or not. Useful for ModSettings
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1">
            <summary>
            ModContent Class for modifying a certain set of vanilla towers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.GetAffectedModels(Il2CppAssets.Scripts.Models.GameModel)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.Apply(Il2CppAssets.Scripts.Models.Model)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.Apply(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.GameModel)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.GetAffected(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Gets the TowerModels that this will affect in the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.Apply(`0)">
            <summary>
            Applies the modifications to the vanilla content
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent`1.Apply(`0,Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Applies the modifications to the vanilla content
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModGameMenu">
            <summary>
            Class for a custom BTD6 menu
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu.CommonForegroundHeader">
            <summary>
            The text of the Header component that's on many UI screens, might be null
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu.Closing">
            <summary>
            Whether the menu is currently closing
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu.BaseMenu">
            <summary>
            The string name of the in game menu to copy from
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu.IsOpen">
            <summary>
            Whether this Menu is open or not
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu.GameMenu">
            <summary>
            The current GameMenu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.OnMenuOpened(Il2CppSystem.Object)">
            <summary>
            Runs right as your custom menu is being opened, with the optional data argument that can be passed into
            <see cref="M:BTD_Mod_Helper.Api.ModGameMenu.Open``1(Il2CppSystem.Object,Il2CppSystem.Object)"/>
            </summary>
            <returns>Whether to run the base menu's OnOpen code</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.OnMenuClosed">
            <summary>
            Runs right as your custom menu is being closed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.OnMenuUpdate">
            <summary>
            Runs every time that your custom menu updates
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.MenuName``1">
            <summary>
            The name NinjaKiwi gave to the menu of the given screen type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModGameMenu.Open``1(Il2CppSystem.Object,Il2CppSystem.Object)">
            <summary>
            Opens a custom menu
            </summary>
            <param name="data">The custom data to pass into your ModGameMenu's <see cref="M:BTD_Mod_Helper.Api.ModGameMenu.OnMenuOpened(Il2CppSystem.Object)"/> method</param>
            <param name="baseData">The data that you want to pass into the base menu's Open method, if you're still running the code</param>
            <typeparam name="T">The custom menu type to open</typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModGameMenu`1">
            <summary>
            Generic class for creating a ModGameMenu with the given type as it's base menu
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu`1.BaseMenu">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModGameMenu`1.GameMenu">
            <inheritdoc cref="P:BTD_Mod_Helper.Api.ModGameMenu.GameMenu"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModHelperData">
            <summary>
            Class representing all the data ModHelper can utilize about a mod as separate from the MelonMod / .dll itself.
            <br />
            This is used for getting mod information from its GitHub repo, for getting information about enabled mods even
            if they don't want to have Mod Helper as a dependency, and keeping track of info about disabled mods.
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModHelperData.Cache">
            <summary>
            The ModHelperData objects for currently enabled mods
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModHelperData.Active">
            <summary>
            ModHelperData for mods that are present in the Mods folder
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModHelperData.Inactive">
            <summary>
            ModHelperData for mods that are in the disabled mods folder
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModHelperData.Mod">
            <summary>
            The currently active mod that this is associated with, if any
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModHelperData.Enabled">
            <summary>
            Whether this mod is correctly in the Enabled mods folder
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModHelperData.RestartRequired">
            <summary>
            Either a Mod's "Enabled" status is different from whether or not it's loaded into the game,
            or the data Version matches the repo's version and not the current version
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModHelperData.FilePath">
            <summary>
            The place that the .dll file for this mod is on the local machine, if any
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModHelperData.#cctor">
            <summary>
            Statically gets the Setters and Getters for easier accessing of the serialized fields
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Data.ModMultiTextOverride">
            <summary>
            A bunch of ModTextOverrides that all share the same Active condition and don't require any on the fly determinations of their text
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.Table">
            <summary>
            The table of keys and values 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.LocalizationKey">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.TextValue">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.KeyPrefix">
            <summary>
            Suffix added to all keys in the table, by default nothing ""
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.KeySuffix">
            <summary>
            Suffix added to all keys in the table, by default nothing ""
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Data.ModMultiTextOverride.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Data.ModSettings">
            <summary>
            Another class outside of the main BloonsMod class that ModSettings can be defined in. Rules other work the same way
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModSettings.RegistrationPriority">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Data.ModSettings.Load">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.Data.ModSettings.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Data.ModTextOverride">
            <summary>
            Class for dynamically overriding In-Game text in a way that's compatible with other mods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModTextOverride.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModTextOverride.LocalizationKey">
            <summary>
            The key within the localization text table that this replaces
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModTextOverride.Active">
            <summary>
            Whether this is active or not at the given moment (that the text is retrieved)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Data.ModTextOverride.TextValue">
            <summary>
            The text that will actually be returned if this is active
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Data.ModTextOverride.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.IModContent">
            <summary>
            Dummy interface to unite ModContent and BloonsMod
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.JsonSerializer">
            <summary>
            Class for serializing and deserializing JSON files
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.JsonSerializer.instance">
            <summary>
            Singleton instance for this class
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.Il2CppSerializeJson``1(``0,System.Boolean)">
            <summary>
            Serialize a il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.SerializeJson``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Serialize a non-il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.SerializeJson``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Boolean)">
            <summary>
            Serialize a non-il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.Il2CppDeserializeJson``1(System.String)">
            <summary>
            Deserialize an Il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize a non-Il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.LoadFromFile``1(System.String)">
            <summary>
            Create an instance of a class from file
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="filePath">Location of the file</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.Il2CppLoadFromFile``1(System.String)">
            <summary>
            Create an instance of an il2cpp class from file
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="filePath">Location of the file</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.SaveToFile``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Save an instance of a class to file
            </summary>
            <typeparam name="T">Type of class to save</typeparam>
            <param name="jsonObject">Object to save. Must be of Type T</param>
            <param name="savePath">Location to save file to</param>
            <param name="ignoreNulls">Whether nulls should be ignored</param>
            <param name="overwriteExisting">Overwrite the file if it already exists</param>
            <param name="shouldIndent">Whether it should be indented</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.SaveToFile``1(``0,System.String,Newtonsoft.Json.JsonSerializerSettings,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.JsonSerializer.SaveToFile``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.Il2CppSaveToFile``1(``0,System.String,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.JsonSerializer.SaveToFile``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModByteLoader`1">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader`1.Load(System.Byte[])">
            <summary>
            The NinjaKiwi generated method that loads the bytes
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModByteLoader`1.LoadResult">
            <summary>
            Gets the result of the loader. Waits for loading to finish if need be.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModContentInstance`1">
            <summary>
            Static generic class that tracks Instances of ModContent
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp">
            <summary>
            Http client used by the mod helper
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp.Client">
            <summary>
            The HttpClient instance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp.Init">
            <summary>
            Initializes the HttpClient
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp.DownloadFile(System.String,System.String)">
            <summary>
            Asynchronously downloads from a url to the given file path, returning whether the operation was successful
            </summary>
            <param name="url">URL to download from</param>
            <param name="filePath">File path for the resulting file</param>
            <returns>Whether it was sucessful</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp.GetZip(System.String)">
            <summary>
            Downloads a zip file directly into a zip archive
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenu.ModHelperHttp.DownloadZip(System.String,System.String)">
            <summary>
            Downloads and extracts the contents of a zip file into the Zip Temp directory, returning the file paths
            of the extracted files
            </summary>
            <param name="url">URL to download from</param>
            <param name="path">Path to unzip into, or null for using the zip temp directory</param>
            <returns>Enumeration of extracted file paths, or null</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModLoadTask">
            <summary>
            Class for a Coroutine style task that runs during the BTD6 loading screen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModLoadTask.DisplayNamePlural">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModLoadTask.Coroutine">
            <summary>
            Coroutine style function
            </summary>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModLoadTask.ShowProgressBar">
            <summary>
            Whether to show the progress bar during this task or not
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModLoadTask.Progress">
            <summary>
            If <see cref="P:BTD_Mod_Helper.Api.ModLoadTask.ShowProgressBar"/> is enabled, how much Progress should be shown (from 0 to 1)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModLoadTask.Description">
            <summary>
            The subtext that appears to the right of the Display Name at the bottom of the loading screen
            <br/>
            Can be dynamically changed while running the task
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModLoadTask.RegisterPerFrame">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModLoadTask.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.MoreAccessTools">
            <summary>
            Further methods along the lines of Harmony's <see cref="T:HarmonyLib.AccessTools"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.MoreAccessTools.SafeGetNestedClassMethod(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Safely gets the MethodInfo for a method within a nested class. This is recommended to use because over
            directly targeting it with typeof and nameof because the nested class names can change randomly.
            </summary>
            <param name="outerType">The outer type whose name won't change</param>
            <param name="nestedTypeName">The name of nested type, not including the _s</param>
            <param name="methodName">The desired method name within the nested type</param>
            <param name="index">If multiple nested classes share a name portion, use the one at this index, default 0</param>
            <returns>The MethodInfo, or null alongside a console warning if one couldn't be found</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.MoreAccessTools.TryGetNestedClassMethod(System.Type,System.String,System.String,System.Reflection.MethodInfo@,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.MoreAccessTools.SafeGetNestedClassMethod(System.Type,System.String,System.String,System.Int32)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.NamedModContent">
            <summary>
            ModContent with DisplayName and Description that registers values in the LocalizationManger's textTable
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.NamedModContent.DisplayName">
            <summary>
            The name that will be actually displayed for this in game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.NamedModContent.DisplayNamePlural">
            <summary>
            The name that will actually be display when referring to multiple of these
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.NamedModContent.Description">
            <summary>
            The in game description of this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.NamedModContent.RegisterText(Il2CppSystem.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Registers the text for this in the LocalizationManager
            </summary>
            <param name="textTable"></param>
            <exclude/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.TaskScheduler">
            <summary>
            Class for scheduling Tasks using MelonCoroutines
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Collections.IEnumerator)">
            <summary>
            Schedule a task to execute right now as a Coroutine
            </summary>
            <param name="iEnumerator"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Action,System.Func{System.Boolean})">
            <summary>
            Schedule a task to execute later on as a Coroutine. By default will wait until the end of this current frame
            </summary>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            Schedule a task to execute later on as a Coroutine
            </summary>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="scheduleType">How you want to wait for your task</param>
            <param name="amountToWait">The amount you want to wait</param>
            /// <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.Coroutine(System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            Will wait for amountToWait before executing your Action. If a waitCondition is specified it will continue waiting amountToWait until waitCondition is true
            </summary>
            <param name="action"></param>
            <param name="scheduleType"></param>
            <param name="amountToWait"></param>
            <param name="waitCondition"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.WaiterCoroutine(BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32)">
            <summary>
            This coroutine will wait for amountToWait before finishing
            </summary>
            <param name="scheduleType"></param>
            <param name="amountToWait"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Animations">
            <summary>
            Class to statically store RuntimeAnimationControllers for different animations
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Animations.Get(System.String)">
            <summary>
            Gets an AnimationController by its name, or null if there isn't one with that name
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Fonts">
            <summary>
            Class to statically store TMP_FontAsset for different fonts
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Fonts.Get(System.String)">
            <summary>
            Gets an AnimationController by its name, or null if there isn't one with that name
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModMenuData">
            <summary>
            Class to be passed in to the Open methods of Screens
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModMenuData.id">
            <summary>
            The id of the ModGameMenu this is for
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModMenuData.modData">
            <summary>
            The data that the ModGameMenu receives
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModMenuData.baseData">
            <summary>
            The data that the base menu receives, if the Open code is still run
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenuData.#ctor(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModMenuData.#ctor(System.String,Il2CppSystem.Object,Il2CppSystem.Object)">
            <summary>
            Creates a ModMenuData object with the given Id and data
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.SessionData">
            <summary>
            This class is used in the API to store data about the current state of the game,
            like whether or not the player is in a Public Coop game
            </summary>
            <exclude/>
            <summary>
            This class stores info about the current session of the game. It's used to track data from
            when the game starts to when it's closed.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.LeakedBloons">
            <summary>
            Contains all the Bloons that were leaked during this round
            Used to track which bloons were popped and which leaked
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.DestroyedBloons">
            <summary>
            Contains all the Bloons that were destroyed during this round
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInPublicCoop">
            <summary>
            If the player is in Coop, this value represents whether it's a 
            Public Coop match or not
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInOdyssey">
            <summary>
            If the player is in a game, are they in a Odyssey game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInRace">
            <summary>
            If the player is in a game, is it a Race game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.SaveDirectory">
            <summary>
            The directory of the save file.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.NkGI">
            <summary>
            The instance of <see cref="T:Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface"/> that is used during a 
            multiplayer game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsPaused">
            <summary>
            If the player is in a game, is it currently paused
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.Instance">
            <summary>
            Singleton instance of SessionData
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.PoppedBloons">
            <summary>
            Keeping track of popped bloons
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.SessionData.bloonPopValues">
            <summary>
            How much cash each bloon is worth when completely popped
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.SessionData.Reset">
            <summary>
            Resets all the values in SessionData
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.BloonsTD6Mod">
            <summary>
            Extend this Class instead of MelonMod to gain access to dozens of easy to use built-in hooks
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnConnected(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface)">
            <summary>
            Executed once the user has connected to a game session.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
            <param name="nkGi">The interface used to interact with the game.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnConnectFail(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface)">
            <summary>
            Executed once the user has tried to connect to a server, but failed to do so.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
            <param name="nkGi">The interface used to interact with the game.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnDisconnected(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface)">
            <summary>
            Executed once the player has disconnected from a server.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
            <param name="nkGi">The interface used to interact with the game.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnPeerConnected(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,System.Int32)">
            <summary>
            Executed when a new client has joined the game session.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
            <param name="nkGi">The interface used to interact with the game.</param>
            <param name="peerId">Index of the peer in question.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnPeerDisconnected(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,System.Int32)">
            <summary>
            Executed when a new client has left the game session.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
            <param name="nkGi">The interface used to interact with the game.</param>
            <param name="peerId">Index of the peer in question.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.ActOnMessage(Il2CppNinjaKiwi.NKMulti.Message)">
            <summary>
            Acts on a Network message that's been sent to the client
            <br/>
            Use <see cref="M:BTD_Mod_Helper.Api.Coop.MessageUtils.ReadMessage``1(Il2CppNinjaKiwi.NKMulti.Message)"/> to read back the message you sent.
            <br/>
            If this is one of your messages and you're consuming and acting on it, return true.
            Otherwise, return false. Seriously.
            Note: Only invoked if <see cref="P:BTD_Mod_Helper.BloonsMod.CheatMod"/> == true.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMapModelLoaded(Il2CppAssets.Scripts.Models.Map.MapModel@)">
            <summary>
            Called when a map model is loaded by the game. Equivelant to MapLoader.Load.
            </summary>
            <param name="mapModel">The map that was just loaded. It is passed by reference to allow for modifications.</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProfileLoaded(Il2CppAssets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            Called when the player's ProfileModel is loaded.
            <br/>
            Equivalent to a HarmonyPostFix on ProfileModel.Validate
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PreCleanProfile(Il2CppAssets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            Perform actions on a profile right before the Mod Helper cleans it. If you see that the Mod Helper cleans
            past profile data from your mod on startup, it should be removed here.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostCleanProfile(Il2CppAssets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            If you removed any data in PreCleanProfile, you may want to add it back here, or just call <see cref="M:BTD_Mod_Helper.BloonsTD6Mod.OnProfileLoaded(Il2CppAssets.Scripts.Models.Profile.ProfileModel)"/>
            again on the profile.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnInGameLoaded(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called when InGame.instance.UnityToSimulation.Simulation is not null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnGameModelLoaded(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Called when Game.instance.model is not null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnNewGameModel(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Called when a new GameModel is created, aka when things like Monkey Knowledge are applied to towers
            <br/>
            Equivalent to a HarmonyPostFix on GameModel.CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerInventoryInitialized(Il2CppAssets.Scripts.Simulation.Input.TowerInventory,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            Called when the TowerInventory is initialized for a game
            </summary>
            <param name="towerInventory"></param>
            <param name="allTowersInTheGame"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnNewGameModel(Il2CppAssets.Scripts.Models.GameModel,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Models.ModModel})">
            <summary>
            Called when a new GameModel is created, aka when things like Monkey Knowledge are applied to towers
            <br/>
            Equivalent to a HarmonyPostFix on GameModel.CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnNewGameModel(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.Map.MapModel)">
            <summary>
            Called when a new GameModel is created, including the map
            <br/>
            Equivalent to a HarmonyPostFix on GameModel.CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnModelLoaded(Il2CppAssets.Scripts.Unity.Display.Factory,System.String,Il2CppSystem.Action{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Called when a display is being loaded such as a towers 3d model
            <br/>
            Equivalent to a HarmonyPostFix on GameModel.CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAudioFactoryStart(Il2CppAssets.Scripts.Unity.Audio.AudioFactory)">
            <summary>
            Called when the games audioFactory is loaded
            <br/>
            Equivalent to a HarmonyPostFix on AudioFactory.Start
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnSpriteLoad(Il2CppAssets.Scripts.Utils.SpriteReference,UnityEngine.UI.Image)">
            <summary>
            Called when a sprite is being loaded
            <br/>
            Equivalent to a HarmonyPostFix on ResourceLoader.LoadSpriteFromSpriteReferenceAsync
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnGameDataLoaded(Il2CppAssets.Scripts.Data.GameData)">
            <summary>
            Called when the GameData.Instance object is first loaded
            </summary>
            <param name="gameData">GameData.Instance</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMainMenu">
            <summary>
            Called when you go to the main menu screen
            <br/>
            Equivalent to a HarmonyPostFix on MainMenu.OnEnable
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnVictory">
            <summary>
            Called right after a match ends in victory
            <br/>
            Equivalent to a HarmonyPostFix on InGame.OnVictory
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMatchStart">
            <summary>
            Called right after a match is started up (restart included it seems like)
            <br/>
            Equivalent to a HarmonyPostFix on InGame.StartMatch
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRestart">
            <summary>
            Called when a match is restarted
            <br/>
            Equivalent to a HarmonyPostFix on InGame.Restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnFastForwardChanged(System.Boolean)">
            <summary>
            Called right after a game ends in victory
            <br/>
            Equivalent to a HarmonyPostFix on TimeManager.SetFastForward
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTitleScreen">
            <summary>
            Called right after the game finishes loading everything
            <br/>
            Equivalent to a HarmonyPostFix on TitleScreen.Start
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMatchEnd">
            <summary>
            Called when the player returns to the MainMenu from a match
            <br/>
            Equivalent to a HarmonyPostFix on InGame.Quit
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PreBloonLeaked(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right before a Bloon would leak.
            Return 'false' to prevent the leak from happening
            <br/>
            Equivalent to a HarmonyPreFix on Bloon.Leaked
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostBloonLeaked(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon leaks.
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Leaked
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonCreated(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is first created
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonModelUpdated(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Bloon's BloonModel is updated
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonDestroy(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is destroyed
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.OnDestroy
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonPopped(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is destroyed, but only when it's popped and not leaked
            </summary>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostBloonDamaged(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Single,Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile,System.Boolean,System.Boolean,System.Boolean,Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2Cpp.BloonProperties,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called right after a Bloon is damaged
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Damaged
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerGraphicsCreated(Il2CppAssets.Scripts.Models.Towers.TowerModel,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Called right before a Tower's 3D graphics are initialized
            <br/>
            Equivalent to a HarmonyPreFix on InputManager.CreateTowerGraphicsAsync
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerCreated(Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2CppAssets.Scripts.Simulation.Objects.Entity,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower is initialized
            <br/>
            Equivalent to a HarmonyPostFix on Tower.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerDestroyed(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is destroyed
            <br/>
            Equivalent to a HarmonyPostFix on Tower.Destroyed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSold(Il2CppAssets.Scripts.Simulation.Towers.Tower,System.Single)">
            <summary>
            Called right after a Tower is sold
            <br/>
            Equivalent to a HarmonyPostFix on Tower.OnSold
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSelected(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is selected by the player
            <br/>
            Equivalent to a HarmonyPostFix on TowerSelectionMenu.Show
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerDeselected(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is deselected by the player
            <br/>
            Equivalent to a HarmonyPostFix on Tower.UnHighlight
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerUpgraded(Il2CppAssets.Scripts.Simulation.Towers.Tower,System.String,Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Called right after a Tower is upgraded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerModelChanged(Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's TowerModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Tower.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSaved(Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2CppAssets.Scripts.Models.Profile.TowerSaveDataModel)">
            <summary>
            Called at the end of each round when a Tower's data is saved
            <br/>
            Use saveData.metaData to save custom information
            <br/>
            Equivalent to a HarmonyPostFix on Tower.GetSavedData
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerLoaded(Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2CppAssets.Scripts.Models.Profile.TowerSaveDataModel)">
            <summary>
            Called when you load a save file and a Tower's save data get loaded for the tower
            <br/>
            Use saveData.metaData to load custom information
            <br/>
            Equivalent to a HarmonyPostFix on Tower.SetSavedData
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnCashAdded(System.Double,Il2CppAssets.Scripts.Simulation.Simulation.CashType,System.Int32,Il2CppAssets.Scripts.Simulation.Simulation.CashSource,Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after Cash is added in a game
            Tower might be null
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.AddCash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnCashRemoved(System.Double,Il2CppAssets.Scripts.Simulation.Simulation.CashType,System.Int32,Il2CppAssets.Scripts.Simulation.Simulation.CashSource)">
            <summary>
            Called right after Cash is removed in a game
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.RemoveCash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRoundStart">
            <summary>
            Called right after a round starts
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnRoundStart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRoundEnd">
            <summary>
            Called right after a round starts
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnRoundEnd
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnDefeat">
            <summary>
            Called right after a match ends in defeat
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnDefeat
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAbilityCast(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability)">
            <summary>
            Called when a ability is cast
            <br/>
            Equivalent to a HarmonyPostFix on Ability.Activate
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAttackCreated(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,Il2CppAssets.Scripts.Simulation.Objects.Entity,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after an Attack is created
            <br/>
            Equivalent to a HarmonyPostFix on Attack.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAttackModelChanged(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's Attack is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Attack.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponCreated(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon,Il2CppAssets.Scripts.Simulation.Objects.Entity,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Weapon is created
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponFire(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Called when a weapon fires
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.SpawnDart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponModelChanged(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's WeaponModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProjectileCreated(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile,Il2CppAssets.Scripts.Simulation.Objects.Entity,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Projectile is created
            <br/>
            Equivalent to a HarmonyPostFix on Projectile.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProjectileModelChanged(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's TowerModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Projectile.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnGameObjectsReset">
            <summary>
            Called when all of the existing GameObjects within a match are destroyed
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt">
            <summary>
            Extensions for AbilityModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt">
            <summary>
            Extensions for AddBehaviorToBloonModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AddBehaviorToBloonModelExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.Behaviors.AddBehaviorToBloonModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AttackBehaviorExt">
            <summary>
            Behavior extensions for attacks
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.HasAttackBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.GetAttackBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.GetAttackBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.AddAttackBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonBehaviorExt">
            <summary>
            Extensions for getting bloon behaviors
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.HasBloonBehavior``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.GetBloonBehavior``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.GetBloonBehaviors``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.AddBloonBehavior``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="bloon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehavior``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehavior``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehaviors``1(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt">
            <summary>
            Extensions for EmissionModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EmissionModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Emissions.EmissionModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.PetModelBehaviorExt">
            <summary>
            Extensions for PetModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PetModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Pets.PetModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt">
            <summary>
            Behavior extensions for PowerModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Powers.PowerModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Powers.PowerModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Powers.PowerModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Powers.PowerModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Powers.PowerModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Powers.PowerModel,``0)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PowerModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Powers.PowerModel)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt">
            <summary>
            Behavior extensions for projectiles
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.HasProjectileBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Check if this has a specific Behavior
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.GetProjectileBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Return the first Behavior of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.GetProjectileBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Return all Behaviors of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.AddProjectileBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile,``0)">
            <summary>
            Add a Behavior to this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Remove all Behaviors of type T
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerBehaviorExt">
            <summary>
            Behavior extensions for Towers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.HasTowerBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Check if this has a specific Behavior
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.GetTowerBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the first Behavior of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.GetTowerBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return all Behaviors of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.AddTowerBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Tower,``0)">
            <summary>
            Add a Behavior to this
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Tower,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Remove all Behaviors of type T
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.WeaponBehaviorExt">
            <summary>
            Behavior extensions for Weapons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.HasWeaponBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.GetWeaponBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.GetWeaponBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.AddWeaponBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="weapon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehavior``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehaviors``1(Il2CppAssets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ArrayExt">
            <summary>
            Extensions for arrays
            </summary>
            <summary>
            Extensions for Arrays
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.TryCast``1(Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase,``0@)">
            <summary>
            Version of TryCast without the generic restriction
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``1(System.Object[],``0@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``2(System.Object[],``0@,``1@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``3(System.Object[],``0@,``1@,``2@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``4(System.Object[],``0@,``1@,``2@,``3@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``5(System.Object[],``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.CheckTypes``6(System.Object[],``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Checks if the parameter array has the given types
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToIl2CppList``1(``0[])">
            <summary>
            Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToIl2CppReferenceArray``1(``0[])">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToLockList``1(``0[])">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Duplicate``1(``0[])">
            <summary>
            Return a duplicate of this Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.DuplicateAs``2(``0[])">
            <summary>
            Return a duplicate of this array as type TCast
            </summary>
            <typeparam name="TSource">The original Array Type</typeparam>
            <typeparam name="TCast">The Cast type</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],``0)">
            <summary>
            Return this with an Item added to it
            </summary>
            <typeparam name="T">The Type of the Item you want to add</typeparam>
            <param name="array"></param>
            <param name="objectToAdd">Item to add to this</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],``0[])">
            <summary>
            Return this with Items added to it
            </summary>
            <typeparam name="T">The Type of the Items you want to add</typeparam>
            <param name="array"></param>
            <param name="objectsToAdd">Items you want to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],System.Collections.Generic.List{``0})">
            <summary>
            Return this with Items added to it
            </summary>
            <typeparam name="T">The Type of the Items you want to add</typeparam>
            <param name="array"></param>
            <param name="objectsToAdd">Items you want to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.HasItemsOfType``2(``0[])">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.GetItemOfType``2(``0[])">
            <summary>
            Return the first Item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.GetItemsOfType``2(``0[])">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItemOfType``2(``0[])">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItem``2(``0[],``1)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="array"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItemsOfType``2(``0[])">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Printed(System.Int32[])">
            <summary>
            A string with all array elements printed together with no spaces
            <br/>
            Useful for the suffix for Tower IDS like DartMonkey-230
            </summary>
            <param name="arr">The array</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Order(System.Int32[])">
            <summary>
            Returns the index of the highest tier, then the middle, then the lowest
            <br/>
            Breaks ties by Middle Path >> Top Path >> Bottom Path
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.IsValid(System.Int32[])">
            <summary>
            Returns whether an int array is a valid set of tiers for a Tower
            </summary>
            <param name="tiers"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="match"> The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Any``1(``0[])">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Any``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt">
            <summary>
            Extensions for sending and receiving data in coop
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.IsCoOpHost(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface)">
            <summary>
            Returns true if the player is a host in a co-op game.
            Works for both lobby and in-game.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,Il2CppNinjaKiwi.NKMulti.Message)">
            <summary>
            Send a Message to all players in the lobby
            </summary>
            <param name="nkGI"></param>
            <param name="message">Message to send</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessageEx``1(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,``0,System.Nullable{System.Byte},System.String)">
            <summary>
            Convert an object to json and send it players or a player in the lobby
            </summary>
            <param name="nkGI"></param>
            <param name="objectToSend">Object you want to send. The properties of the object will be serialised as JSON.</param>
            <param name="peerId">The id of the peer you want the message to go to. Leave null if you want to send to all players</param>
            <param name="code">Coop code used to distinguish this message from others. Like a lock and key for reading messages</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,Il2CppSystem.String,System.Nullable{System.Byte},System.String)">
            <summary>
            Send a string to players or a player in the lobby
            </summary>
            <param name="nkGI"></param>
            <param name="objectToSend">string message to send. Can be JSON</param>
            <param name="peerId">The id of the peer you want the message to go to. Leave null if you want to send to all players</param>
            <param name="code">Coop code used to distinguish this message from others. Like a lock and key for reading messages</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.ReadMessage``1(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppStructArray{System.Byte})">
            <summary>
            Convert messageBytes to an object of type T
            </summary>
            <typeparam name="T">Type to convert bytes to</typeparam>
            <param name="nkGI"></param>
            <param name="messageBytes">messageBytes</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.ReadMessage``1(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,Il2CppNinjaKiwi.NKMulti.Message)">
            <summary>
            Convert a Message's bytes to an object of type T
            </summary>
            <typeparam name="T">Type to convert bytes to</typeparam>
            <param name="nkGI"></param>
            <param name="message">Message you want to read</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage``1(Il2CppNinjaKiwi.NKMulti.NKMultiGameInterface,``0,System.Nullable{System.Byte},System.String)">
            <summary>
            Convert an object to json and send it players or a player in the lobby
            </summary>
            <param name="nkGI"></param>
            <param name="objectToSend">Object you want to send. The properties of the object will be serialised as JSON.</param>
            <param name="peerId">The id of the peer you want the message to go to. Leave null if you want to send to all players</param>
            <param name="code">Coop code used to distinguish this message from others. Like a lock and key for reading messages</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DumpNodeExt">
            <summary>
            Extension for dumping textures from UnityDisplayNodes
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DumpNodeExt.Dump(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Only runs when tower placed.
            Dumps any textures inside of a display node into Ninja Kiwi directory
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.GameExt">
            <summary>
            Extensions for Game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCoopLobbyScreen(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns the current lobby screen.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCoopLobbyConnection(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns the current lobby connection.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetSaveDirectory(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns the directory where the Player's Profile.save file is located.
            Not set until after reaching the Main Menu for the first time
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.SavePlayerData(Il2CppAssets.Scripts.Unity.Game,System.String)">
            <summary>
            Makes a save of Player.Save at the specified path
            </summary>
            <param name="game"></param>
            <param name="savePath">Path to save to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.CanGetFlagged(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Checks if Player is in a game mode that would get them flagged if using mods
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInRace(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a race
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInPublicCoop(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a public co-op match
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInOdyssey(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a Odyssey game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetNkGI(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get nkGI for the current session. Will be null if not in multiplayer game or lobby
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetDisplayFactory(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the Unity Display Factory that manages on screen sprites. This Factory is different from other Factories in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetJsonSerializer(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Gets a Json Serializer. Not necessary but can be useful
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPopupScreen(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of PopupScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetShopMenu(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of ShopMenu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCommonForegroundScreen(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of CommonForegroundScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCommonBackgroundScreen(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of CommonBackgroundScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMenuManager(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of MenuManager
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetUI(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of UI
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetTowerListForTowerType(Il2CppAssets.Scripts.Unity.Game,Il2CppAssets.Scripts.Models.TowerSets.TowerSet)">
            <summary>
            Not tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetBtd6Player(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the Btd6Player data for the player. Contains different info than PlayerProfile
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetTowerDetailModels(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get all TowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetHeroDetailModels(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get all HeroDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPowerDetailModels(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get all PowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMonkeyMoney(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get player's current Monkey Money amount
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.AddMonkeyMoney(Il2CppAssets.Scripts.Unity.Game,System.Double)">
            <summary>
            Add Monkey Money to player's total Monkey Money
            </summary>
            <param name="game">the Game instance</param>
            <param name="amount">Amount to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.SetMonkeyMoney(Il2CppAssets.Scripts.Unity.Game,System.Double)">
            <summary>
            Set player's Monkey Money amount
            </summary>
            <param name="game">the Game instance</param>
            <param name="amount">Value to set Monkey Money to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMapLoader(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns the instance of the Map Loader.
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.CreateSpriteReference(Il2CppAssets.Scripts.Unity.Game,System.String)">
            <summary>
            Returns a new SpriteReference that uses the given guid
            </summary>
            <param name="game"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsAccountFlagged(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Returns whether or not the player's account is currently flagged/hackerpooled
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetLocalizationManager(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the instance of LocalizationManager
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Il2CppAssets.Scripts.Unity.Game,System.Collections.IEnumerator)">
            <summary>
            Schedule a task to execute right now as a Coroutine
            </summary>
            <param name="game"></param>
            <param name="iEnumerator"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Il2CppAssets.Scripts.Unity.Game,System.Action,System.Func{System.Boolean})">
            <summary>
            Schedule a task to execute later on as a Coroutine. By default will wait until the end of this current frame
            </summary>
            <param name="game"></param>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Il2CppAssets.Scripts.Unity.Game,System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            Schedule a task to execute later on as a Coroutine
            </summary>
            <param name="game"></param>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="scheduleType">How you want to wait for your task</param>
            <param name="amountToWait">The amount you want to wait</param>
            /// <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerLiNKAccount(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get Player LinkAccount. Contains limited info about player's NinjaKiwi account
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerProfile(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the ProfileModel for the Player
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerService(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get the PlayerService for the player
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetModel(Il2CppAssets.Scripts.Unity.Game)">
            <summary>
            Get GameModel. Same as using Game.instance.model
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ShowMessage(Il2CppAssets.Scripts.Unity.Game,System.String,System.String)">
            <summary>
            Uses custom message popup to show a message in game. Currently only works in active game sessions and not on Main Menu
            </summary>
            <param name="game">the Game instance</param>
            <param name="message">Message body</param>
            <param name="title">Message title. Will be mod name by default</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ShowMessage(Il2CppAssets.Scripts.Unity.Game,System.String,System.Single,System.String)">
            <summary>
            Uses custom message popup to show a message in game. Currently only works in active game sessions and not on Main Menu
            </summary>
            <param name="game">the Game instance</param>
            <param name="message">Message body</param>
            <param name="displayTime">Time to show message on screen</param>
            <param name="title">Message title. Will be mod name by default</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InGameExt">
            <summary>
            Extensions for the InGame class
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.IsCoOpReady(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Returns true if the initial co-op handshake has finished and user has co-op game details.
            </summary>
            <param name="inGame">The game.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetRoundSet(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,Il2CppAssets.Scripts.Models.Rounds.RoundSetModel)">
            <summary>
            Custom API method that changes the game's round set to a custom RoundSetModel.
            </summary>
            <param name="inGame"></param>
            <param name="roundSet">New Round Set Model to use</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetInGameUI(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the game object that owns all InGame UI elements
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetCashManager(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Get the Cash Manager for the current game
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="index">Index of the cash manager. Default is 0</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetCash(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the Player's current cash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddCash(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add cash to the Player's wallet
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Amount of cash to add to player wallet</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetCash(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set the Player's cash to a specific amount
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Value to set cash to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the Player's current health
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add health to the players current health
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Amount of health to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set player's health to specific amount
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Value to set health to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMaxHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the player's max health
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddMaxHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add to the player's max health
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Amount to add to the player's max health</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetMaxHealth(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set the player's maximum health to a new value
            </summary>
            <param name="inGame">InGame instance</param>
            <param name="amount">Value to set max health to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetPoppedBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get collection of popped bloons in this game. Right now only works for current games. Does not store results from loaded games 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowerInventory(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the current instance of TowerInventory being used in this game session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetRound(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Set the current round
            </summary>
            <param name="inGame"></param>
            <param name="round"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.String,System.Int32,System.Single)">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonName"></param>
            <param name="number"></param>
            <param name="spacing"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Collections.Generic.List{Il2CppAssets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{Il2CppAssets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="round"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.IsInGame(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Returns whether or not the player is currently in a game.
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMap(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the current Map
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetSimulation(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the current Simulation for this InGame session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetGameModel(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            The Game.model that is being used for this InGame.instance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMainFactory(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the main Factory that creates and manages all other Factories
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetFactory``1(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the Factory for a specific Type. Ex: Getting the Factory that makes Towers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowers(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.String)">
            <summary>
            Get every Tower that has been created through the Tower Factory
            </summary>
            <param name="inGame"></param>
            <param name="name">Optionally only get Towers whose TowerModel name is this parameter</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllTowerToSim(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.String)">
            <summary>
            Get all TowerToSimulations
            </summary>
            <param name="inGame"></param>
            /// <param name="name">Optionally only get Towers whose TowerModel name is this parameter</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetBloons(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get's all Bloons on the map
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllBloonToSim(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get's all existing BloonToSimulations
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetProjectiles(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get's all existing Projectiles on the map
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowerManager(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the current TowerManager for this game session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAbilities(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get's all AbilityToSimulations currently in the game
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetUnityToSimulation(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get's the UnityToSimulation for this game
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllObjectsOfType``1(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Gets all objects of type T. Does this by returning all objects created by the Factory of type T
            </summary>
            <typeparam name="T">The type of items you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SellTowers(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,System.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.Towers.Tower})">
            <summary>
            Sells multiple towers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SellTower(Il2CppAssets.Scripts.Unity.UI_New.InGame.InGame,Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Sells a tower
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonModelExt">
            <summary>
            Extensions for BloonModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.AddTag(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String)">
            <summary>
            Adds a tag to the BloonModel, if it doesn't already exist
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.RemoveTag(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String)">
            <summary>
            Removes a tag from the BloonModel, if it exists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetBloonModel(Il2CppAssets.Scripts.Models.Rounds.BloonGroupModel)">
            <summary>
            Gets the BloonModel for this group
            </summary>
            <param name="bloonGroupModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetTotalCash(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Int32)">
            <summary>
            (Cross-Game compatable) Return how much cash this bloon would give if popped by <paramref name="layersPopped"/> number of layers
            </summary>
            <param name="bloonModel"></param>
            <param name="layersPopped">How many layers of bloons to pop, ignoring layer health. If less than 0, calculates for the entire bloon</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetIndex(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return the number position of this bloon from the list of all bloons (Game.instance.model.bloons)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SpawnBloonModel(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Spawn this BloonModel on the map right now
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.CreateBloonEmissionModel(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Int32,System.Int32)">
            <summary>
            Create a BloonEmissionModel from this BloonModel
            </summary>
            <param name="bloonModel"></param>
            <param name="count">Number of bloons in this emission model</param>
            <param name="spacing">Space between each bloon in this emission model</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetBloonSims(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return all BloonToSimulations with this BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetAllBloonToSim(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return all BloonToSimulations with this BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetDisplayGUID(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String)">
            <summary>
            Set the Display GUID for this BloonModel.
            </summary>
            <param name="bloonModel"></param>
            <param name="guid"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetDisplayGUID(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Returns the Display GUID for this BloonModel.
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetBaseID(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return the Base ID of this BloonModel
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.IsCamoBloon(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Returns whether or not this BloonModel is a Camo bloon.
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetCamo(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Boolean)">
            <summary>
            Set whether or not this BloonModel is a Camo bloon.
            </summary>
            <param name="bloonModel"></param>
            <param name="isCamo"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.IsRegrowBloon(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Returns whether or not this BloonModel is a Regrow bloon.
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetRegrowBool(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Boolean)">
            <summary>
            Set whether or not this BloonModel is a Regrow bloon.
            </summary>
            <param name="bloonModel"></param>
            <param name="isRegrow"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetRegrow(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String,System.Single)">
            <summary>
            Adds the Regrow behavior to this BloonModel and sets what 
            Bloon it Regrows into.
            </summary>
            <param name="bloonModel"></param>
            <param name="regrowsTo">The ID of the BloonModel that this should regrow into.</param>
            <param name="regrowRate">The rate at which this regrows.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.RemoveRegrow(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Removes the Regrow behavior from this BloonModel.
            </summary>
            <param name="bloonModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.IsFortifiedBloon(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Returns whether or not this BloonModel is a Fortified bloon.
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetFortified(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Boolean)">
            <summary>
            Set whether or not this BloonModel is a Fortified bloon.
            </summary>
            <param name="bloonModel"></param>
            <param name="isFortified"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.IsMoabBloon(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Returns whether or not this BloonModel is an MOAB-Class bloon.
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SetMoab(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Boolean)">
            <summary>
            Set whether or not this BloonModel is a Fortified bloon.
            </summary>
            <param name="bloonModel"></param>
            <param name="isMoabBloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.ApplyDisplay``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Applies a given ModDisplay to this TowerModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.AddToChildren``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Int32)">
            <summary>
            Adds a child to be spawned from the Bloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetSpawnChildrenModel(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Boolean)">
            <summary>
            Gets the SpawnChildrenModel for the bloon, and optionally creates one if it doesn't exist
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.AddToChildren(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String,System.Int32)">
            <summary>
            Adds a child to be spawned from the Bloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.RemoveAllChildren(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Removes all spawned children from this BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.RemoveFromChildren(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String,System.Int32)">
            <summary>
            Removes up to amount of the given Bloon from the spawned children
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.ReplaceInChildren(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String,System.String)">
            <summary>
            Replaces all spawned child Bloons with the given id with the given ModBloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.ReplaceInChildren``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String)">
            <summary>
            Replaces all spawned child Bloons that have id oldId with the given ModBloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.ReplaceInChildren``2(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.String)">
            <summary>
            Replaces all spawned child Bloons of the first ModBloon type with the second ModBloon type
            </summary>
            <param name="bloonModel"></param>
            <param name="id"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.FindChangedBloonId(Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Action{Il2CppAssets.Scripts.Models.Bloons.BloonModel},System.String@)">
            <summary>
            Finds the id for a bloon that has the properties of this bloonModel, or null if there isn't one
            </summary>
            <param name="bloonModel"></param>
            <param name="change"></param>
            <param name="id"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.MakeChildrenCamo(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Makes all children of this Bloon Camo, if they can have it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.MakeChildrenRegrow(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Makes all children of this Bloon Regrow, if they can have it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.MakeChildrenFortified(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Makes all children of this Bloon Fortified, if they can have it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetModBloon(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Gets the ModBloon associated with this BloonModel
            <br/>
            If there is no associated ModBloon, returns null
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.GameModelExt">
            <summary>
            Extensions for the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.DoesTowerModelExist(Il2CppAssets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns whether or not any TowerModels in <see cref="P:Il2CppAssets.Scripts.Models.GameModel.towers"/> have <paramref name="towerId"/>
            in it's name
            </summary>
            <param name="model"></param>
            <param name="towerId"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.DoesTowerDetailsExist(Il2CppAssets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns whether or not any TowerDetailsModels in <see cref="P:Il2CppAssets.Scripts.Models.GameModel.towerSet"/> have <paramref name="towerId"/>
            in it's name
            </summary>
            <param name="model"></param>
            <param name="towerId"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerToGame(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.Towers.TowerModel,Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Add a TowerModel to the game.
            <br/>
            Using this method is preferable than modifying the GameModel's towers list manually, as this does more things
            to more fully integrate the tower within the game
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="towerModel">TowerModel to add</param>
            <param name="towerDetailsModel">Optionally add a TowerDetailsModel for your towerModel</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowersToGame(Il2CppAssets.Scripts.Models.GameModel,System.Collections.Generic.IEnumerable{Il2CppAssets.Scripts.Models.Towers.TowerModel})">
            <summary>
            Add multiple TowerModels to the game more efficiently than calling the single method repeatedly.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Adds a tower 
            </summary>
            <param name="model"></param>
            <param name="towerDetailsModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel,Il2CppAssets.Scripts.Models.TowerSets.TowerSet)">
            <summary>
            Adds a TowerDetailsModel to the GameModel's TowerSet, taking into account what set of towers it's a part of
            <br/>
            For example, a new custom Primary tower would be added right at the end of the primary towers,
            and right before the start of the military towers
            </summary>
            <param name="model">The GameModel</param>
            <param name="towerDetailsModel">The TowerDetailsModel to be added</param>
            <param name="set">The TowerSet of the tower to be added</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel,System.Int32)">
            <summary>
            Adds a TowerDetailsModel to the GameModel's TowerSet at a particular index
            </summary>
            <param name="model"></param>
            <param name="towerDetailsModel"></param>
            <param name="index"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddHeroDetails(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.TowerSets.HeroDetailsModel,System.Int32)">
            <summary>
            Adds a HeroDetailsModel to the GameModel's HeroSet at a particular index
            </summary>
            <param name="model"></param>
            <param name="heroDetailsModel"></param>
            <param name="index"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllTowerDetails(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all TowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllShopTowerDetails(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all ShopTowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModels(Il2CppAssets.Scripts.Models.GameModel,System.String)">
            <summary>
            Return all TowerModels with a specific base id
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="towerBaseId">The base id all towers should share. Example: "DartMonkey"</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModel(Il2CppAssets.Scripts.Models.GameModel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a TowerModel from model.towers.
            NOTE: model.GetTower cannot get custom towers so use this method instead
            </summary>
            <param name="model"></param>
            <param name="towerId"></param>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path3"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmissions(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.Bloons.BloonModel,System.Int32,System.Single)">
            <summary>
            Create a BloonEmissionModel from a bloonModel
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="bloonModel">The bloon model that these bloons should be</param>
            <param name="number">Number of Bloons in this emission</param>
            <param name="spacing">Space between each bloon in this emission</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmissions(Il2CppAssets.Scripts.Models.GameModel,System.String,System.Int32,System.Single)">
            <summary>
            Create a BloonEmissionModel from a bloon's name
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="bloonName">Name of bloon. Example: "Red"</param>
            <param name="number">Number of Bloons in this emission</param>
            <param name="spacing">Space between each bloon in this emission</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmission(Il2CppAssets.Scripts.Models.GameModel,System.String,System.Single)">
            <summary>
            Create a single BloonEmission
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="bloonName">Name of this bloon. Example: "Red"</param>
            <param name="time">Time the bloon should be spawned</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmission(Il2CppAssets.Scripts.Models.GameModel,System.String,System.Single,Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.Bloons.Bloon.ChargedMutator},Il2CppSystem.Collections.Generic.List{Il2CppAssets.Scripts.Simulation.Objects.BehaviorMutator})">
            <summary>
            Create a single BloonEmission
            </summary>
            <param name="model">the GameModel instance</param>
            <param name="bloonName">Name of this bloon. Example: "Red"</param>
            <param name="time">Time the bloon should be spawned</param>
            <param name="chargedMutators"></param>
            <param name="behaviorMutators"></param>
            <exclude/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonGroup(Il2CppAssets.Scripts.Models.GameModel,System.String,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a BloonGroup
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllAttackModels(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all AttackModels from every TowerModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllWeaponModels(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all WeaponModels from every AttackModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllProjectileModels(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all ProjectileModels from every TowerModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllAbilityModels(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all AbilityModels from every TowerModel in the game
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModelsWithAbilities(Il2CppAssets.Scripts.Models.GameModel)">
            <summary>
            Return all TowerModels that have at least one AbilityModel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddUpgrade(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Fully adds an UpgradeModel to the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddUpgrades(Il2CppAssets.Scripts.Models.GameModel,System.Collections.Generic.List{Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel})">
            <summary>
            Fully adds multiple UpgradeModels to the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddUpgrades(Il2CppAssets.Scripts.Models.GameModel,Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel[])">
            <summary>
            Fully adds multiple UpgradeModels to the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerDetails(Il2CppAssets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns the first TowerDetailsModel in <see cref="P:Il2CppAssets.Scripts.Models.GameModel.towerSet"/> that has a towerId of
            <paramref name="towerDetailsName"/>
            </summary>
            <param name="model"></param>
            <param name="towerDetailsName">The <see cref="P:Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel.towerId"/> you are searching for</param>
            <returns>The first TowerDetailsModel found, otherwise returns null</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.DoesBloonExist(Il2CppAssets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns whether or not a bloon exists with this name
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProfileModelExt">
            <summary>
            Extensions for ProfileModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProfileModelExt.UnlockTower(Il2CppAssets.Scripts.Models.Profile.ProfileModel,System.String)">
            <summary>
            Add a tower to the list of UnlockedTowers
            </summary>
            <param name="profileModel"></param>
            <param name="towerId">The ID of the tower you want to unlock</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProfileModelExt.UnlockTower(Il2CppAssets.Scripts.Models.Profile.ProfileModel,System.String,System.Boolean)">
            <summary>
            Add a tower to the list of UnlockedTowers only if the TowerModel is in Game.instance.model.towers
            </summary>
            <param name="profileModel"></param>
            <param name="towerId">The ID of the tower you want to unlock</param>
            <param name="unlockIfTowerModelExists">If set to true the TowerModel will only be unlocked if it has been registered in the game</param>
            <returns>Returns whether or not the tower was unlocked</returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProjectileModelExt">
            <summary>
            Extensions for ProjectileModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.CanHitCamo(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Returns whether a projectile is able to hit Camo bloons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.SetHitCamo(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel,System.Boolean)">
            <summary>
            Makes a projectile model able to see Camo or not
            </summary>]
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.GetDamageModel(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Get the DamageModel behavior from the list of behaviors
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.GetProjectileSims(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Get all Projectile Simulations that have this ProjectileModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.ApplyDisplay``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Applies a given ModDisplay to this ProjectileModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.RoundModelExt">
            <summary>
            Extensions for RoundModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.AddBloonGroup(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.String,System.Int32,System.Single,System.Single)">
            <summary>
            Adds a new group of Bloons to this round
            </summary>
            <param name="roundModel">The round model</param>
            <param name="bloonId">The id of the Bloon</param>
            <param name="count">How many Bloons will be emitted</param>
            <param name="startTime">When this group starts emitting, in frames (seconds / 60)</param>
            <param name="endTime">When this group stops emitting, in frames (seconds / 60)</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.AddBloonGroup``1(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.Int32,System.Single,System.Single)">
            <summary>
            Adds a new group of Bloons to this round
            </summary>
            <param name="roundModel">The round model</param>
            <param name="count">How many Bloons will be emitted</param>
            <param name="startTime">When this group starts emitting, in frames (seconds / 60)</param>
            <param name="endTime">When this group stops emitting, in frames (seconds / 60)</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.ClearBloonGroups(Il2CppAssets.Scripts.Models.Rounds.RoundModel)">
            <summary>
            Removes all Bloon Groups from the Round
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.RemoveBloonGroup(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.String)">
            <summary>
            Removes all Bloon Groups where the id is as specified
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.RemoveBloonGroup(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.String,System.Int32)">
            <summary>
            Removes the index'th Bloon Group where the id is as specified
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.ReplaceBloonInGroups(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.String,System.String,System.Boolean)">
            <summary>
            Replaces BloonGroups of a certain bloonId with ones for a new Id
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RoundModelExt.ReplaceBloonInGroups``1(Il2CppAssets.Scripts.Models.Rounds.RoundModel,System.String,System.Boolean)">
            <summary>
            Replaces BloonGroups of a certain bloonId with ones for a new Id
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SupportModelExt">
            <summary>
            Extension methods for support models
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SupportModelExt.ApplyBuffIcon``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.SupportModel)">
            <summary>
            Makes a support model use a particular ModBuffIcon as its display
            </summary>
            <param name="supportModel">The support model to apply to</param>
            <typeparam name="T">The ModBuffIcon type</typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerDetailsModelExt">
            <summary>
            Extensions for TowerDetailsModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetIndex(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Gets the index of this TowerDetailsModel within the GameModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.IsHero(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Returns if this TowerDetailModel is actually for a Hero
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetTowerPurchaseButton(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Get the TowerPurchaseButton that is used to buy this specific TowerDetailModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetShopTowerDetails(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Get the ShopTowerDetails for this TowerDetailModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.MakeCopy(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel,System.String,System.Boolean)">
            <summary>
            Makes a copy of this TowerDetailsModel with a new name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.MakeCopy(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel,System.String,System.Int32,System.Boolean)">
            <summary>
            Makes a copy of this TowerDetailsModel with a new name and index
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.SetName(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel,System.String)">
            <summary>
            Sets the name of this TowerDetailsModel, following the naming convention of ofther TowerDetailModels.
            Example, using "NewMonkey" will set the name to "TowerDetailsModel_NewMonkey"
            </summary>
            <param name="towerDetailsModel"></param>
            <param name="newName"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetTower(Il2CppAssets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Gets the TowerModel for this TowerDetailsModel
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerModelExt">
            <summary>
            Extensions for TowerModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.SetMaxAmount(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Not Tested. Use to set the maximum allowed number of this tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerDetailsModel(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all TowerDetailModels that share a base id with this towerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerPurchaseButton(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the TowerPurchaseButton for this TowerModel.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetIndex(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the number position of this TowerModel in the list of all tower models
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetUpgradeLevel(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Return the current upgrade level of a specific path
            </summary>
            <param name="towerModel">the TowerModel</param>
            <param name="path">What tier of upgrade is currently applied to tower</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsHeroUnlocked(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            If this TowerModel is for a Hero, is this Hero unlocked?
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsUpgradeUnlocked(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Has a specific upgrade for this TowerModel been unlocked already?
            </summary>
            <param name="towerModel">the TowerModel</param>
            <param name="path">Upgrade path</param>
            <param name="tier">Tier of upgrade</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsUpgradePathUsed(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Check if a specific upgrade path is being used/ has any upgrades applied to it
            </summary>
            <param name="towerModel">the TowerModel</param>
            <param name="path">Upgrade path to check</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Check if an upgrade has been applied
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel,Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Check if an upgrade has been applied
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAppliedUpgrades(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all UpgradeModels that are currently applied to this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetUpgrade(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Return the UpgradeModel for a specific upgrade path/tier
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetHeroModel(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            If this TowerModel is a Hero, return the HeroModel behavior
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.MakeCopy(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.String,System.Boolean,System.String)">
            <summary>
            Duplicate this TowerModel with a unique name. Very useful for making custom TowerModels
            </summary>
            <param name="towerModel"></param>
            <param name="newTowerId">Set's the new towerId of this copy. By default the baseId will be set to this as well</param>
            <param name="addToGame"></param>
            <param name="newBaseId">Specify a new baseId. Set this if you want a baseId other than the newTowerId</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasTiers(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if this tower has speficif upgrade tiers
            </summary>
            <param name="towerModel"></param>
            <param name="tier1"></param>
            <param name="tier2"></param>
            <param name="tier3"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.SetTiers(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a TowerModel's tiers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.AddTiersToName(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32,System.Int32)">
            <summary>
            Format's the tower's name with its tiers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.AddTiersToName(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Format's the tower's name with its tiers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerSet(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets the tower set (vanilla or modded) of this tower in the form of a string
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsVanillaTower(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets whether a Tower/Hero is a base one added by the vanilla game.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetBaseId(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Get the name of the BaseTower. Will be different from this TowerModel's name if this TowerModel isn't a BaseTower
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsTowerUnlocked(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Has player already unlocked this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAllTowerToSim(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all TowerToSimulations with this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbilities(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all AbilityModel behaviors from this tower, if it has any
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbility(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the first ability on the tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbility(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Return a specific Ability of the tower.
            </summary>
            <param name="towerModel">the TowerModel</param>
            <param name="index">Index of the ability you want.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModels(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all AttackModel behaviors for this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModel(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the first AttackModel from this TowerModel, if it has one
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModel(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.String)">
            <summary>
            Return the first AttackModel whose name contains the given string
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModel(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Return one of the AttackModels from this TowerModel. By default will give the first AttackModel
            </summary>
            <param name="towerModel">The TowerModel</param>
            <param name="index">Index of the AttackModel you want</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapons(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Recursively get every WeaponModels this TowerModel has
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapon(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Return one of the WeaponModels this TowerModel has. By default will return the first one
            </summary>
            <param name="towerModel">The TowerModel</param>
            <param name="index">Index of WeaponModel that you want</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapon(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the first WeaponModel this TowerModel has, if it has one.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.SellAll(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Sell every tower that uses this TowerModel
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerId(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Get the TowerId of this TowerModel. Equivalent to towerModel.name
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.MakeCopyInternal(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.String)">
            <summary>
            Duplicate this TowerModel with a unique name. Very useful for making custom TowerModels
            </summary>
            <param name="towerModel"></param>
            <param name="newTowerId">Set's the new towerId of this copy. By default the baseId will be set to this as well</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.ApplyDisplay``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies a given ModDisplay to this TowerModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetModTower(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets the ModTower associated with this TowerModel
            <br/>
            If there is no associated ModTower, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetModTower``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets the specific ModTower associated with this TowerModel
            <br/>
            If there is no associated ModTower, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IncreaseRange(Il2CppAssets.Scripts.Models.Towers.TowerModel,System.Single)">
            <summary>
            Increase the range of a tower and all its attacks by the given amount
            </summary>
            <param name="towerModel"></param>
            <param name="rangeIncrease"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.UpgradeModelExt">
            <summary>
            Extensions for UpgradeModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.IsUpgradeUnlocked(Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Return whether or not this upgrade has been unlocked by the player
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.GetModUpgrade(Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Gets the ModUpgrade associated with this UpgradeModel
            <br/>
            If there is no associated ModUpgrade, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.GetUpgrade(Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradePathModel)">
            <summary>
            Gets the UpgradeModel that this UpgradePathModel uses
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.GetModUpgrade(Il2CppAssets.Scripts.Models.Towers.Upgrades.UpgradePathModel)">
            <summary>
            Gets the ModUpgrade that this UpgradePathModel is for, or null if it's vanilla
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.NK_TextMeshProUGUIExt">
            <summary>
            Extensions for NK_TextMeshProUGuis
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NK_TextMeshProUGUIExt.GetText(Il2Cpp.NK_TextMeshProUGUI)">
            <summary>
            Gets the localized text for the component
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NK_TextMeshProUGUIExt.SetText(Il2Cpp.NK_TextMeshProUGUI,System.String,System.String)">
            <summary>
            Changes the text in the localization manager for this component
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonExt">
            <summary>
            Extensions for Bloons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetBloonToSim(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the existing BloonToSimulation for this specific Bloon.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.WillPopBloon(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Tests whether a project will pop this bloon
            </summary>
            <param name="bloon"></param>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.WasBloonPopped(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Returns whether or not the bloon was popped rather than leaked.
            </summary>
            <param name="bloon"></param>
            <returns>True if it was popped, false if it was leaked or not destroyed yet</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetCamo(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be camo or not. Will change bloonModel to camo version if it exists
            </summary>
            <param name="bloon">the Bloon</param>
            <param name="isCamo">Should bloon be camo</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetFortified(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be fortified or not. Will change bloonModel to fortified version if it exists
            </summary>
            <param name="bloon">the Bloon</param>
            <param name="isFortified">Should bloon be fortified</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetRegrow(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be regrow or not. Will change bloonModel to regrow version if it exists
            </summary>
            <param name="bloon">the Bloon</param>
            <param name="isRegrow">Should bloon be regrow</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.RemoveBloonStatus(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Remove current statuses from bloon
            </summary>
            <param name="bloon">the Bloon</param>
            <param name="removeCamo">Should remove camo if present?</param>
            <param name="removeFortify">Should remove fortify if present?</param>
            <param name="removeRegrow">Should remove regrow if present?</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetBloonStatus(Il2CppAssets.Scripts.Simulation.Bloons.Bloon,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the statuses of the bloon. Will change bloonModel if one exists with these statuses
            </summary>
            <param name="bloon">the Bloon</param>
            <param name="setCamo">Should have camo?</param>
            <param name="setFortified">Should have fortify?</param>
            <param name="setRegrow">Should have regrow?</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetDisplayNode(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the DisplayNode for this bloon
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetUnityDisplayNode(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the UnityDisplayNode for this bloon. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.CreateBloonToSim(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Creates a new BloonToSimulation based off of this Bloon and stores it for possible later use. It will automatically destroyed when this Bloon is destroyed
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetId(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the Id of this Bloon
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetFactory(Il2CppAssets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the Factory that creates Bloons
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonToSimulationExt">
            <summary>
            Extensions for the BloonToSimulation
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetDisplayNode(Il2CppAssets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the DisplayNode for this bloon
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetUnityDisplayNode(Il2CppAssets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the UnityDisplayNode for this bloon. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetBloon(Il2CppAssets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the Simulation Bloon for this specific BloonToSimulation. Returns object of class Bloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetDistanceTravelled(Il2CppAssets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the total distance this BloonToSim has travelled
            </summary>
            <param name="bloonToSim"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetId(Il2CppAssets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the Id of this BloonToSimulation
            </summary>
            <param name="bloonToSim"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.EntityExt">
            <summary>
            Extensions for Entities
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetDisplayNode(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Get the DisplayNode for this Entity
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetUnityDisplayNode(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Get the UnityDisplayNode for this Entity
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetFactory(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Return the Factory that creates Entities
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.MapExt">
            <summary>
            Extensions for Maps
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.MapExt.GetMapRect(Il2CppAssets.Scripts.Simulation.Track.Map)">
            <summary>
            Gets the Map's rectangle
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProjectileExt">
            <summary>
            Extensions for Projectiles
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetDisplayNode(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Get the DisplayNode for this Projectile
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetUnityDisplayNode(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Get the UnityDisplayNode for this Projectile. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetFactory(Il2CppAssets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Return the Factory that creates Projectiles
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SelectableObjectExt">
            <summary>
            Extensions for Selectable Objects
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SelectableObjectExt.GetSkinnedMeshRenderer(Il2CppAssets.Scripts.Simulation.Objects.SelectableObject)">
            <summary>
            Gets the first SkinnedMeshRenderer of this object
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerExt">
            <summary>
            Extensions for Towers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetMonkeyAnimController(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Get the MonkeyAnimationController for this Tower. Needed to modify 3D models
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.SetTowerModel(Il2CppAssets.Scripts.Simulation.Towers.Tower,Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Change TowerModel to a different one. Will update display
            </summary>
            <param name="tower">The Simulation Tower</param>
            <param name="towerModel">TowerModel to change to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetDisplayNode(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the DisplayNode for this Tower
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetUnityDisplayNode(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the UnityDisplayNode for this Tower. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.SellTower(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Sell this tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetTowerToSim(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the TowerToSimulation for this specific Tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetFactory(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the Factory that creates Towers
            </summary>
            <param name="tower"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetTowersInRange(Il2CppAssets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Gets all other towers that are in range of this tower not including itself
            </summary>
            <param name="tower"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.UnityToSimulationExt">
            <summary>
            Extensions for UnityToSimulation
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.StandardTowerPurchaseButtonExt">
            <summary>
            Extensions for StandardTowerPurchaseButtons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StandardTowerPurchaseButtonExt.SetBackground(Il2CppAssets.Scripts.Unity.UI_New.InGame.StoreMenu.StandardTowerPurchaseButton,UnityEngine.Texture2D)">
            <summary>
            Set the background image of this button
            </summary>
            <param name="button"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StandardTowerPurchaseButtonExt.SetBackground(Il2CppAssets.Scripts.Unity.UI_New.InGame.StoreMenu.StandardTowerPurchaseButton,UnityEngine.Sprite)">
            <summary>
            Set the background image of this button
            </summary>
            <param name="button"></param>
            <param name="sprite"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AudioClipExtensions">
            <summary>
            Extensions for unity audio clips
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AudioClipExtensions.Play(UnityEngine.AudioClip,System.String,System.Single)">
            <summary>
            Plays a sound through the default Game AudioFactory
            </summary>
            <param name="audioClip">The audio clip to play</param>
            <param name="volume">How loud it should be</param>
            <param name="groupId">TODO group stuff</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ImageExt">
            <summary>
            Extensions for Images
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSprite(UnityEngine.UI.Image,Il2CppAssets.Scripts.Utils.SpriteReference)">
            <summary>
            Set the sprite for this image 
            </summary>
            <param name="image"></param>
            <param name="spriteReference">Sprite to change image to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSprite(UnityEngine.UI.Image,System.String)">
            <summary>
            Set the sprite for this image 
            </summary>
            <param name="image"></param>
            <param name="guid">Sprite to change image to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.LoadSprite(UnityEngine.UI.Image,Il2CppAssets.Scripts.Utils.SpriteReference)">
            <summary>
            Loads a sprite reference to this image
            </summary>
            <param name="image"></param>
            <param name="spriteReference"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSpriteFromAtlas(UnityEngine.UI.Image,System.String,System.String)">
            <summary>
            Sets the sprite of this image to one with the given name in the named sprite atlas
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SaveToPNG(UnityEngine.UI.Image,System.String)">
            <summary>
            Saves an image as a PNG files
            Coded in a robust manner that should work for all images, including those with multiple sprites on them being used
            </summary>
            <param name="image"></param>
            <param name="filePath">Absolute file path on the machine to save the file to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSprite(UnityEngine.UI.Image,UnityEngine.Sprite)">
            <summary>
            Set the sprite for this image
            </summary>
            <param name="image"></param>
            <param name="sprite">Sprite to change image to</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.PopupScreenExt">
            <summary>
            Extensions for PopupScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PopupScreenExt.GetTMP_InputField(Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen)">
            <summary>
            Gets the InputField of the ActivePopup, or null
            </summary>
            <param name="popupScreen"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PopupScreenExt.GetBodyText(Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen)">
            <summary>
            Gets the NK_TextMeshProUGUI of the ActivePopup, or null
            </summary>
            <param name="popupScreen"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PopupScreenExt.ModifyField(Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen,System.Action{Il2CppTMPro.TMP_InputField})">
            <summary>
            Modifies the NK_TextMeshProUGUI of the most recently created popup
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PopupScreenExt.ModifyBodyText(Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen,System.Action{Il2Cpp.NK_TextMeshProUGUI})">
            <summary>
            Modifies the TMP InputField of the most recently created popup
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.PopupScreenExt.SafelyQueue(Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen,System.Action{Il2CppAssets.Scripts.Unity.UI_New.Popups.PopupScreen})">
            <summary>
            Since a recent BTD6 update, trying to show a popup while there already is one can cause a game crash. This method
            safely queues a popup for once there aren't any already active
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.RendererExt">
            <summary>
            Extensions for unity renderers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetTriangles(UnityEngine.SkinnedMeshRenderer,System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Experimental method of messing with mesh renderers at runtime
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetTriangles(UnityEngine.SkinnedMeshRenderer,System.Collections.Generic.List{System.Int32})">
            <summary>
            Experimental method of messing with mesh renderers at runtime
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetVerticesConnectedToBone(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            Experimental method of messing with mesh renderers at runtime
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetVerticesConnectedToBoneArray(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            Experimental method of messing with mesh renderers at runtime
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetMainTexture(UnityEngine.Renderer,UnityEngine.Texture2D)">
            <summary>
            Set the texture for this renderer. Equivalent to "render.material.mainTexture = texture2D"
            </summary>
            <param name="renderer"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetOutlineColor(UnityEngine.Renderer,UnityEngine.Color)">
            <summary>
            Sets the outline color for this renderer
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetMainTexture(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{UnityEngine.Renderer},UnityEngine.Texture2D)">
            <summary>
            Set the texture for all renderers in this collection. Equivalent to a "ForEach(render.material.mainTexture = texture2D)"
            </summary>
            <param name="renderers"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.UnbindMesh(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            Unbinds the renderer's sharedMesh, so that changes you make to it don't change the original
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.BakedMesh(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetVertices(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetTriangles(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            Gets the list of triangles for a Mesh, even if its not marked as isReadable
            <br/>
            Each "triangle" is a set of 3 consecutive ints in the list, where the number is the index in the vertices
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="submesh"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetTrianglesAsArrays(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="submesh"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetBoneIndex(UnityEngine.SkinnedMeshRenderer,System.String)">
            <summary>
            
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt">
            <summary>
            Behavior Extensions for AttackModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt">
            <summary>
            Behavior extensions for BloonModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.EntityBehaviorExt">
            <summary>
            Behavior extensions for Entities
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Simulation.Objects.Entity,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="entity"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Simulation.Objects.Entity,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ModelBehaviorExt">
            <summary>
            Extensions for dealing with the behaviors of Models
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Gets the behaviors of a model. If the model does not have a behaviors field, then this returns null.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.SetBehaviors(Il2CppAssets.Scripts.Models.Model,System.Collections.Generic.IEnumerable{Il2CppAssets.Scripts.Models.Model},System.Boolean)">
            <summary>
            Sets the behaviors of a model to the specified IEnumerable of behaviors
            </summary>
            <param name="model">The model</param>
            <param name="behaviors">The new behaviors</param>
            <param name="handleDependents">Whether this should handle adding and removing dependents itself</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Model,``0@)">
            <summary>
            Check if this has a specific Behavior and return it
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Return the first Behavior of type T, or null if there isn't one
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model,System.Int32)">
            <summary>
            Return the index'th Behavior of type T, or null
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Model,System.String)">
            <summary>
            Return the first Behavior of type T whose name contains the given string, or null
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.AddBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Add a Behavior to this model
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model,System.Int32)">
            <summary>
            Remove the index'th Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Model,System.String)">
            <summary>
            Remove the first Behavior of Type T whose name contains a certain string
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehavior(Il2CppAssets.Scripts.Models.Model,Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Removes a specific behavior from a tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Remove all Behaviors of type T
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt">
            <summary>
            Behavior Extensions for ProjectileModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel,``0@)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt">
            <summary>
            Behavior extensions for TowerModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel,``0@)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.TowerModel,``0)">
            <summary>
            Removes a specific behavior from a tower
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt">
            <summary>
            Behavior extensions for WeaponModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.BloonsModExt">
            <summary>
            Extensions for BloonsMods (for some reason lol)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModName(BTD_Mod_Helper.BloonsMod)">
            <summary>
            Get the name of this mod from it's dll name
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModDirectory(BTD_Mod_Helper.BloonsMod)">
            <summary>
            Get the personal mod directory for this specific mod. Useful for keeping this mod's files seperate from other mods. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModDirectory(BTD_Mod_Helper.BloonsMod,System.Boolean)">
            <summary>
            Get the personal mod directory for this specific mod. Useful for keeping this mod's files seperate from other mods. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <param name="createIfNotExists">Create the mod's directory if it doesn't exist yet?</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModSettingsDir(BTD_Mod_Helper.BloonsMod)">
            <summary>
            Gets the directory where this mod's settings are or will be stored. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModSettingsDir(BTD_Mod_Helper.BloonsMod,System.Boolean)">
            <summary>
            Gets the directory where this mod's settings are or will be stored. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <param name="createIfNotExists">Create the mod's directory if it doesn't exist yet?</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.IEnumerableExt">
            <summary>
            Extensions for the normal System IEnumerable class
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToIl2CppList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToIl2CppReferenceArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToLockList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.CastAll``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts a reference array to an IEnumerable of a different Il2cpptype.
            <br/>
            Objects that aren't of the specified type will end up as null in the result
            </summary>
            <param name="list"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ArgMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the argument that maximizes the given value
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.Deconstruct``2(System.Linq.IGrouping{``0,``1},``0@,System.Collections.Generic.List{``1}@)">
            <summary>
            Deconstruct IGrouping to list
            </summary>
            <param name="grouping"></param>
            <param name="k"></param>
            <param name="v"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Repeats each element in the sequence n times, keeping the same order of elements
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt">
            <summary>
            Extensions for il2cpp ienumerables 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.GetEnumeratorCollections``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the IEnumerator as type Il2CppSystem.Collections.IEnumerator. Needed for IEnumerator.MoveNext(). Not the same as IEnumerable.GetEnumerator()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.Count``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the total number of elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.GetItem``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Return the Item at a specific index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToIl2CppList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToIl2CppReferenceArray``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToLockList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppGenericsExt">
            <summary>
            Extensions for generic il2cpp lists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToList``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToArray``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return as an Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToIl2CppReferenceArray``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToLockList``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.Duplicate``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return a duplicate of this List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.DuplicateAs``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return a duplicate of this list as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.HasItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.GetItemOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.GetItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItemOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItem``2(Il2CppSystem.Collections.Generic.List{``0},``1)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.Get``1(Il2CppSystem.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Gets the item at the specified index. Circumvents "ambiguous indexer" warnings
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt">
            <summary>
            Extensions for Il2cpp Ienumerators
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.Count(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Get the total number of elements
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.GetItem(Il2CppSystem.Collections.IEnumerator,System.Int32)">
            <summary>
            Return the Item at a specific index
            </summary>
            <param name="enumerator"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return as System.List
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToIl2CppList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToIl2CppReferenceArray(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToLockList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToRootObjectLockList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt">
            <summary>
            Extensions for Il2CppReferenceArrays
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Empty``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Returns an empty <see cref="T:Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Clear``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Sets all elements in the <see cref="T:Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray`1"/> to the default value of each element type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceArray"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToList``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return as System.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToIl2CppList``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToArray``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return as a System.Array
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToLockList``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Duplicate``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.DuplicateAs``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},``0)">
            <summary>
            Return this with an additional Item added to it
            </summary>
            <typeparam name="T">The Type of the Item to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectToAdd">Item to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return this with additional Items added to it
            </summary>
            <typeparam name="T">The Type of the Items to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectsToAdd">Items to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},System.Collections.Generic.List{``0})">
            <summary>
            Return this with additional Items added to it
            </summary>
            <typeparam name="T">The Type of the Items to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectsToAdd">Items to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.HasItemsOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.GetItemOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.GetItemsOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="removeChildFrom">Model to remove the child dependents from</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItem``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},``1)">
            <summary>
            Return this with the specified item removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemsOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemsOfType``2(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="removeChildFrom">Model to remove the child dependents from</param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppStringArrayExt">
            <summary>
            Extension methods for Il2CppStringArrays
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppStringArrayExt.AddTo(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppStringArray,System.String)">
            <summary>
            Return this with an Item added to it
            </summary>
            <param name="array"></param>
            <param name="itemToAdd"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ListExt">
            <summary>
            Extensions for non il2cpp Lists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToIl2CppList``1(System.Collections.Generic.List{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToIl2CppReferenceArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToLockList``1(System.Collections.Generic.List{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToRootObjectLockList``1(System.Collections.Generic.List{``0})">
            <summary>
            Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.Duplicate``1(System.Collections.Generic.List{``0})">
            <summary>
            Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.DuplicateAs``2(System.Collections.Generic.List{``0})">
            <summary>
            Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.SaveToFile``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Save a list to file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list you want to save</param>
            <param name="filePath">The FilePath you want to save it to</param>
            <returns>True if successful, false if it fails</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.LoadFromFile``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Load a List from a FilePath
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="filePath">FilePath of the saved List</param>
            <returns>The loaded List if successful, otherwise default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.LoadFromFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean@)">
            <summary>
            Load a List from a FilePath
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="filePath">FilePath of the saved List</param>
            <param name="success">Will be true if the List was successfully loaded, otherwise will be false</param>
            <returns>The loaded List if successful, otherwise default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.HasItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.GetItemOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.GetItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItemOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItem``2(System.Collections.Generic.List{``0},``1)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.LockedListExt">
            <summary>
            Extensions for LockLists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToList``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToIl2CppList``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToArray``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return as System.Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToIl2CppReferenceArray``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.Duplicate``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.DuplicateAs``2(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.AddTo``2(Il2CppAssets.Scripts.Utils.LockList{``0},``1)">
            <summary>
            Return this with an additional Item added to it
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item to add</typeparam>
            <param name="lockList"></param>
            <param name="objectToAdd">Item to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.HasItemsOfType``2(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.GetItemsOfType``2(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItemOfType``2(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItem``2(Il2CppAssets.Scripts.Utils.LockList{``0},``1)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItemsOfType``2(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.RootObjectLockList">
            <summary>
            Extensions for RootObjectLockLists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.ToList``1(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.ToIl2CppList``1(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.ToArray``1(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return as System.Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.ToIl2CppReferenceArray``1(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.Duplicate``1(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.DuplicateAs``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.AddTo``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0},``1)">
            <summary>
            Return this with an additional Item added to it
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item to add</typeparam>
            <param name="lockList"></param>
            <param name="objectToAdd">Item to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.HasItemsOfType``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.GetItemsOfType``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.RemoveItemOfType``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.RemoveItem``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0},``1)">
            <summary>
            Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.RemoveItemsOfType``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RootObjectLockList.GetItemOfType``2(Il2CppAssets.Scripts.Simulation.Objects.RootObjectLockList{``0})">
            <summary>
            
            </summary>
            <param name="lockList"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DeconstructExt">
            <summary>
            Adding more deconstruct methods to things
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DeconstructExt.Deconstruct(UnityEngine.Rect,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruct a rectangle
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DeconstructExt.Deconstruct(UnityEngine.Vector2,System.Single@,System.Single@)">
            <summary>
            For some reason the normal deconstruct isn't accessible in all places?
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DeconstructExt.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            For some reason the normal deconstruct isn't accessible in all places?
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Function">
            <summary>
            
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Function`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.FunctionExt">
            <summary>
            Extensions for Functions
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FunctionExt.ToAction(BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Convert a function to an action
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FunctionExt.ToAction``1(BTD_Mod_Helper.Extensions.Function{``0})">
            <summary>
            Convert a function to an action
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.HarmonyExt">
            <summary>
            Extensions for Harmony stuff
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)">
            <summary>
            Add a prefix patch
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix(HarmonyLib.Harmony,System.Type,System.Int32,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.String,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix(HarmonyLib.Harmony,System.Type,System.String,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.String,System.Int32,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix(HarmonyLib.Harmony,System.Type,System.String,System.Int32,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix(HarmonyLib.Harmony,System.Reflection.MethodInfo,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix(HarmonyLib.Harmony,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPrefix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)">
            <summary>
            Add a postfix patch
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix(HarmonyLib.Harmony,System.Type,System.Int32,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.String,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix(HarmonyLib.Harmony,System.Type,System.String,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.String,System.Int32,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix(HarmonyLib.Harmony,System.Type,System.String,System.Int32,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix(HarmonyLib.Harmony,System.Reflection.MethodInfo,System.Type,System.String)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix(HarmonyLib.Harmony,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.HarmonyExt.PatchPostfix``2(HarmonyLib.Harmony,System.Int32,System.String)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppSystemDelegateExxt">
            <summary>
            Extensions for Il2cpp delegates
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDelegateExxt.Duplicate``1(Il2CppSystem.Delegate)">
            <summary>
            Create a new and seperate copy of this object. Same as using:  .Clone().Cast();
            </summary>
            <typeparam name="T">Type of object you want to cast to when duplicating. Done automatically</typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt">
            <summary>
            Extensions for il2cpp dictionaries
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt.GetValues``2(Il2CppSystem.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Get all of the values from this Dictionary as a list
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt.Deconstruct``2(Il2CppSystem.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct method of IL2CPP KeyValuePairs
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt">
            <summary>
            Extensions for Il2cpp objects
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.ReferenceEquals(Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase,Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase)">
            <summary>
            Is this Reference equal to another Object's Reference?
            </summary>
            <param name="instance"></param>
            <param name="to">Object to compare to</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object)">
            <summary>
            Check if object is the same type as T
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object,``0@)">
            <summary>
            Check if object is the same type as T
            </summary>
            <param name="instance"></param>
            <param name="castObject">The casted object if this is of type T</param>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.Is``1(Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.Is``1(Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase,``0@)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object,``0@)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.TypeName(Il2CppInterop.Runtime.InteropTypes.Il2CppObjectBase)">
            <summary>
            Gets the exact il2cpp type name of an object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.ToIl2Cpp(System.Single)">
            <summary>
            Box a float into an Il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.ToIl2Cpp(System.Int32)">
            <summary>
            Box a int into an Il2cpp object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.ToIl2Cpp(System.Boolean)">
            <summary>
            Box a bool into an Il2cpp object
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable">
            <summary>
            Extensions for Il2cpp Ienumerables
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.ForEach``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Any``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Any``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Last``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.LastOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.First``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.FirstOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.FirstOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppGenerics">
            <summary>
            Extensions for il2cpp lists 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.First``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FirstOrDefault``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Where``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FindIndex``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Any``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Any``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Last``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.LastOrDefault``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.First``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FirstOrDefault``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppIEnumerator">
            <summary>
            Extensions for il2cpp ienumerators
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.ForEach``1(Il2CppSystem.Collections.IEnumerator,System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.First``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FirstOrDefault``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Where``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FindIndex``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Any``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Last``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.LastOrDefault``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.First``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FirstOrDefault``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Il2CppReferenceArray">
            <summary>
            Extensions for il2cpp reference arrays
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.ForEach``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.FindIndex``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.Any``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0})">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.Any``1(Il2CppInterop.Runtime.InteropTypes.Arrays.Il2CppReferenceArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.LockedList">
            <summary>
            Extensions for LockedLists
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.ForEach``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.First``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FirstOrDefault``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Where``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FindIndex``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Any``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Any``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Last``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.LastOrDefault``1(Il2CppAssets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.First``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FirstOrDefault``1(Il2CppAssets.Scripts.Utils.LockList{``0})">
            <summary>
            Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AbilityModelExt">
            <summary>
            Extensions for AbilityModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelExt.GetAbilitySims(Il2CppAssets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <summary>
            Get the all AbilityToSimulation with this AbilityModel
            </summary>
            <param name="abiltyModel"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt">
            <summary>
            Behavior extensions for AirUnitModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.HasBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel,``0@)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.GetBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.GetBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.AddBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.RemoveBehavior``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel,``0)">
            <summary>
            Removes a specific behavior from a tower
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AirUnitModelBehaviorExt.RemoveBehaviors``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.AirUnitModel)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AttackModelExt">
            <summary>
            Extensions for AttackModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.AddWeapon(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Add a weapon to this Attack Model
            </summary>
            <param name="attackModel">this</param>
            <param name="weaponToAdd">Weapon to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.RemoveWeapon(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            Remove a weapon from this Attack Model
            </summary>
            <param name="attackModel">this</param>
            <param name="weaponToRemove">Weapon to remove</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.SetWeapon(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,Il2CppAssets.Scripts.Models.Towers.Weapons.WeaponModel,System.Int32)">
            <summary>
            Sets the weapon at the given index (default 0) of this attack model to be the given one.
            </summary>
            <param name="attackModel">this</param>
            <param name="weaponModel">Weapon to add</param>
            <param name="index">Index within weapons array</param>
            <exception cref="T:System.ArgumentException"> thrown when index &#60; 0</exception>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.GetAllProjectiles(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            Recursively get all ProjectileModels for this attack model and all of it's weapons
            </summary>
            <param name="attackModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.ApplyDisplay``1(Il2CppAssets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,System.Int32)">
            <summary>
            Applies the given ModDisplay to the index'th (or first) DisplayModel in the behaviors of the AttackModel.
            <br/>
            If there are no DisplayModels, then this does nothing
            </summary>
            <param name="attackModel"></param>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DisplayModelExt">
            <summary>
            Extensions for DisplayModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DisplayModelExt.ApplyDisplay``1(Il2CppAssets.Scripts.Models.GenericBehaviors.DisplayModel)">
            <summary>
            Applies a given ModDisplay to this DisplayModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.GrowModelExt">
            <summary>
            Extension methods for <see cref="T:Il2CppAssets.Scripts.Models.Bloons.Behaviors.GrowModel"/>.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GrowModelExt.SetRegrowBloon(Il2CppAssets.Scripts.Models.Bloons.Behaviors.GrowModel,System.String)">
            <summary>
            Sets which bloon this should regrow into.
            </summary>
            <param name="growModel"></param>
            <param name="regrowsTo">The ID of the bloon this should regrow into</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GrowModelExt.SetRegrowBloon(Il2CppAssets.Scripts.Models.Bloons.Behaviors.GrowModel,System.String,System.Single)">
            <summary>
            Sets which bloon this should regrow into.
            </summary>
            <param name="growModel"></param>
            <param name="regrowsTo">The ID of the bloon this should regrow into</param>
            <param name="regrowRate">The rate at which this regrows.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GrowModelExt.GetRegrowBloon(Il2CppAssets.Scripts.Models.Bloons.Behaviors.GrowModel)">
            <summary>
            Returns the ID of the BloonModel that this regrows into.
            </summary>
            <param name="growModel"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ModelExt">
            <summary>
            Extensions for Models
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelExt.Duplicate``1(``0)">
            <summary>
            Create a new and separate copy of this object. Same as using:  .Clone().Cast();
            </summary>
            <typeparam name="T">Type of object you want to cast to when duplicating. Done automatically</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelExt.GenerateDescendentNames(Il2CppAssets.Scripts.Models.Model)">
            <summary>
            Turns any descendants with "_" as their name into unique named models
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ModModelExt">
            <summary>
            Extensions for the ModModel (GameMode) class
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.HasMutator``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Check if this has a specific Mutator
            </summary>
            <typeparam name="T">The Mutator you're checking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.HasMutator``1(Il2CppAssets.Scripts.Models.ModModel,``0@)">
            <summary>
            Check if this has a specific Mutator and return it
            </summary>
            <typeparam name="T">The Mutator you're checking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.GetMutator``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Return the first Mutator of type T, or null if there isn't one
            </summary>
            <typeparam name="T">The Mutator you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.GetMutator``1(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Return the index'th Mutator of type T, or null
            </summary>
            <typeparam name="T">The Mutator you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.GetMutator``1(Il2CppAssets.Scripts.Models.ModModel,System.String)">
            <summary>
            Return the first Mutator of type T whose name contains the given string, or null
            </summary>
            <typeparam name="T">The Mutator you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.GetMutators``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Return all Mutators of type T
            </summary>
            <typeparam name="T">The Mutator you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.AddMutator(Il2CppAssets.Scripts.Models.ModModel,Il2CppAssets.Scripts.Models.MutatorModModel)">
            <summary>
            Add a Mutator to this ModModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutator``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Remove the first Mutator of Type T
            </summary>
            <typeparam name="T">The Mutator you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutator``1(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Remove the index'th Mutator of Type T
            </summary>
            <typeparam name="T">The Mutator you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutator``1(Il2CppAssets.Scripts.Models.ModModel,System.String)">
            <summary>
            Remove the first Mutator of Type T whose name contains a certain string
            </summary>
            <typeparam name="T">The Mutator you want to remove</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutator(Il2CppAssets.Scripts.Models.ModModel,Il2CppAssets.Scripts.Models.MutatorModModel)">
            <summary>
            Removes a specific mutator from a tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutators``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Remove all Mutators of type T
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.RemoveMutators(Il2CppAssets.Scripts.Models.ModModel,System.Func{Il2CppAssets.Scripts.Models.MutatorModModel,System.Boolean})">
            <summary>
            Removes all mutators that match a given condition
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.UseRoundSet(Il2CppAssets.Scripts.Models.ModModel,System.String)">
            <summary>
            Makes this GameMode use the given RoundSet
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.UseRoundSet``1(Il2CppAssets.Scripts.Models.ModModel)">
            <summary>
            Makes this GameMode use the given RoundSet
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetStartingCash(Il2CppAssets.Scripts.Models.ModModel,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the cash this mode starts you with using a <see cref="T:Il2CppAssets.Scripts.Models.Gameplay.Mods.StartingCashModModel"/>
            </summary>
            <param name="model"></param>
            <param name="baseCash">If not 0, the new base cash amount to set the starting amount to</param>
            <param name="addCash">How much cash to add to the default base cash</param>
            <param name="multCash">If not 0, an overall multiplier to the amount of starting cash</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetStartingHealth(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Sets the life total this mode starts you with using a <see cref="T:Il2CppAssets.Scripts.Models.Gameplay.Mods.StartingCashModModel"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetMaxHealth(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Sets the maximum life total this mode starts you with using a <see cref="T:Il2CppAssets.Scripts.Models.Gameplay.Mods.MaxHealthModModel"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetStartingRound(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Sets the round this mode starts at using a <see cref="T:Il2CppAssets.Scripts.Models.Gameplay.Mods.StartingRoundModModel"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetEndingRound(Il2CppAssets.Scripts.Models.ModModel,System.Int32)">
            <summary>
            Sets the round this mode ends at using a <see cref="T:Il2CppAssets.Scripts.Models.Gameplay.Mods.EndRoundModModel"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetMkEnabled(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether Monkey Knowledge is enabled for a gamemode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetPowersEnabled(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether Powers are enabled for a game mode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetContinuesEnabled(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether Continues are enabled for a game mode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetSellingEnabled(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether selling towers is enabled for a game mode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetIncomeEnabled(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether extra income is enabled for a game mode
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetBloonHealth(Il2CppAssets.Scripts.Models.ModModel,System.Single,System.String)">
            <summary>
            Modifies the Health that Bloons with a given tag have, like <see cref="F:BTD_Mod_Helper.Api.Enums.BloonTag.Moabs"/> for all Moabs
            </summary>
            <param name="model"></param>
            <param name="mult">The multiplier to apply to Bloons' health</param>
            <param name="tag">The Bloon tag to apply to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.LockTowerSet(Il2CppAssets.Scripts.Models.ModModel,Il2CppAssets.Scripts.Models.TowerSets.TowerSet,System.Boolean)">
            <summary>
            Prevents a particular TowerSet from being used in this mode
            </summary>
            <param name="model"></param>
            <param name="towerSet">The tower set to lock</param>
            <param name="locked">Whether to lock or unlock the tower set</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetImpoppable(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets the max health and shield amount to 1
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetReversed(Il2CppAssets.Scripts.Models.ModModel,System.Boolean)">
            <summary>
            Sets whether the Bloons go in reverse
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetAllCashMultiplier(Il2CppAssets.Scripts.Models.ModModel,System.Single)">
            <summary>
            Applies a multiplier to all cash gains in the mode (but not starting cash)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModModelExt.SetSellMultiplier(Il2CppAssets.Scripts.Models.ModModel,System.Single)">
            <summary>
            Sets the portion of cash that should be gotten back when selling (0.7 by default)
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SpawnerExt">
            <summary>
            Extensions for Spawners
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpawnerExt.Emit(Il2CppAssets.Scripts.Simulation.Track.Spawner,Il2CppAssets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            Spawn a BloonModel on the map
            </summary>
            <param name="spawner"></param>
            <param name="bloonModel"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TowerToSimulationExt">
            <summary>
            Extensions for TowerToSimulation
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerToSimulationExt.GetTower(Il2CppAssets.Scripts.Unity.Bridge.TowerToSimulation)">
            <summary>
            Return the Tower associated with this TowerToSimulation
            </summary>
            <param name="towerToSim"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ActionExt">
            <summary>
            Extension methods for System.Action
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.ToIl2CppSystemAction(System.Action)">
            <summary>
            Return this as a System.Action
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(System.Collections.Generic.List{System.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(System.Collections.Generic.List{System.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(System.Collections.Generic.List{Il2CppSystem.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(System.Collections.Generic.List{Il2CppSystem.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(Il2CppSystem.Collections.Generic.List{Il2CppSystem.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(Il2CppSystem.Collections.Generic.List{Il2CppSystem.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(Il2CppSystem.Collections.Generic.List{System.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(Il2CppSystem.Collections.Generic.List{System.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AssemblyExt">
            <summary>
            Extensions for Assemblies
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AssemblyExt.GetEmbeddedResource(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the bytes for an embedded resource with the given name (found with endsWith), or null if no matches
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AssemblyExt.TryGetEmbeddedResource(System.Reflection.Assembly,System.String,System.IO.Stream@)">
            <inheritdoc cref="M:BTD_Mod_Helper.Extensions.AssemblyExt.GetEmbeddedResource(System.Reflection.Assembly,System.String)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DictionaryExt">
            <summary>
            Extensions for normal System Dictionaries
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DictionaryExt.GetValues``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Get all of the values from this Dictionary as a list
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DirectoryInfoExt">
            <summary>
            Extensions for DirectoryInfo
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DirectoryInfoExt.GetAllMelonMods(System.IO.DirectoryInfo)">
            <summary>
            Returns all Files in this directory that reference MelonLoader.dll or MelonLoader.ModHandler.dll
            </summary>
            <param name="directoryInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.FileInfoExt">
            <summary>
            Extensions for FileInfo
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.GetAllReferences(System.IO.FileInfo)">
            <summary>
            Get all Assembly References from this FileInfo. Returns null if there are none
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsMelonMod(System.IO.FileInfo)">
            <summary>
            Returns whether or not this File has a reference to the newer MelonLoader.dll or the older MelonLoader.ModHandler.dll
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsNewerMelonMod(System.IO.FileInfo)">
            <summary>
            Returns whether or not this File has a reference to the newer MelonLoader.dll (For MelonLoader 3.0 and up)
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsOlderMelonMod(System.IO.FileInfo)">
            <summary>
            Returns whether or not this File has a reference to the older MelonLoader.ModHandler.dll (For MelonLoader 2.7.4 and below)
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.StreamExt">
            <summary>
            Extensions for streams
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StreamExt.GetByteArray(System.IO.Stream)">
            <summary>
            Synchronously gets the full array of bytes from any stream, disposing with the Stream afterwards
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.StringExt">
            <summary>
            Extensions for strings
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StringExt.Spaced(System.String)">
            <summary>
            Puts spaces between capitalized words within a string
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StringExt.NullIfEmpty(System.String)">
            <summary>
            Returns null if a string is empty / whitespace, otherwise just returns back the string
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StringExt.RegexReplace(System.String,System.String,System.String)">
            <summary>
            <inheritdoc cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StringExt.ToTitleCase(System.String)">
            <summary>
            <inheritdoc cref="M:System.Globalization.TextInfo.ToTitleCase(System.String)"/>
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.TypeExt">
            <summary>
            Extensions for Type
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TypeExt.GetMethods(System.Type,System.String)">
            <summary>
            Get all methods with the specified method name
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ButtonExt">
            <summary>
            Extensions for Buttons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonExt.AddOnClick(UnityEngine.UI.Button,BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Adds an onclick function to a button
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonExt.SetOnClick(UnityEngine.UI.Button,BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Sets the onclick function of a button
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonExt.RemoveOnClickAction(UnityEngine.UI.Button,System.Int32)">
            <summary>
            Removes the onclick function of a button
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonExt.SetSprite(UnityEngine.UI.Button,UnityEngine.Sprite,System.String)">
            <summary>
            Set the sprite for this button.
            </summary>
            <param name="button"></param>
            <param name="sprite">Sprite to change to</param>
            <param name="newSpriteName">Optionally provide a new name for the sprite</param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ComponentExt">
            <summary>
            Extensions for Component
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.GetComponent``1(UnityEngine.Component,System.String)">
            <summary>
            Finds the component with the given path and type
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.GetComponentFromChildrenByName``1(UnityEngine.Component,System.String)">
            <summary>
            Try to get a component in a child of this Component by it's name. Equivelant to a foreach with GetComponentsInChildren
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.Show(UnityEngine.Component)">
            <summary>
            Makes the Component visible by setting the scale to the default value of 1
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.Hide(UnityEngine.Component)">
            <summary>
            Makes the Component hidden (not visible) by setting the scale to zero
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.TranslateScaled(UnityEngine.Component,UnityEngine.Vector3)">
            <summary>
            Translates this component scaled with it's "lossyScale", making it move the same
            amount regardless of screen resolution
            </summary>
            <param name="component"></param>
            <param name="translation"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.Destroy(UnityEngine.Component)">
            <summary>
            Destroys this Component
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ButtonClickedEventExt">
            <summary>
            Extensions for ButtonClickedEvents
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonClickedEventExt.AddListener(UnityEngine.UI.Button.ButtonClickedEvent,BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Adds a function to the click event
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonClickedEventExt.SetListener(UnityEngine.UI.Button.ButtonClickedEvent,BTD_Mod_Helper.Extensions.Function)">
            <summary>
            Sets a function to be the only listener of a click event
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonClickedEventExt.RemovePersistantCall(UnityEngine.UI.Button.ButtonClickedEvent,System.Int32)">
            <summary>
            Remove a specific persistent call from a click event
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonClickedEventExt.RemoveAllPersistantCalls(UnityEngine.UI.Button.ButtonClickedEvent)">
            <summary>
            Removes all specific persistent call from a click event
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InputFieldOnValueChanged">
            <summary>
            Extension for OnChangeEvent
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InputFieldOnValueChanged.Function">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InputFieldOnValueChanged.AddListener(UnityEngine.UI.InputField.OnChangeEvent,BTD_Mod_Helper.Extensions.InputFieldOnValueChanged.Function)">
            <summary>
            Adds a listener to a ValueChangedEvent
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InputFieldSubmitEvent">
            <summary>
            Extensions for InputFieldSubmitEvents
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InputFieldSubmitEvent.Function">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InputFieldSubmitEvent.AddListener(UnityEngine.UI.InputField.SubmitEvent,BTD_Mod_Helper.Extensions.InputFieldSubmitEvent.Function)">
            <summary>
            Adds a function to a submit event
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SliderEventExt">
            <summary>
            Extensions for SliderEvents
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SliderEventExt.Function">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SliderEventExt.AddListener(UnityEngine.UI.Slider.SliderEvent,BTD_Mod_Helper.Extensions.SliderEventExt.Function)">
            <summary>
            Adds a listener to a slider event
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ToggleEventExt">
            <summary>
            Extensions for ToggleEvents
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ToggleEventExt.Function">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ToggleEventExt.AddListener(UnityEngine.UI.Toggle.ToggleEvent,BTD_Mod_Helper.Extensions.ToggleEventExt.Function)">
            <summary>
            Add a function to a submit event
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.GameObjectExt">
            <summary>
            Extensions for GameObjects
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.GetComponent``1(UnityEngine.GameObject,System.String)">
            <summary>
            Finds a component with the given path and type
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.GetComponentInChildrenByName``1(UnityEngine.GameObject,System.String)">
            <summary>
            Try to get a component in a child of this GameObject by it's name. Equivelant to a foreach with GetComponentsInChildren
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Show(UnityEngine.GameObject)">
            <summary>
            Makes the Game Object visible by setting the scale to the default value of 1
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Hide(UnityEngine.GameObject)">
            <summary>
            Makes the Game Object hidden (not visible) by setting the scale to zero
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Destroy(UnityEngine.GameObject)">
            <summary>
            Destroys this GameObject
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.RecursivelyLog(UnityEngine.GameObject,System.Int32)">
            <summary>
            Logs a GameObject's hierarchy recursively
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.TranslateScaled(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Translates this GameObject scaled with it's "lossyScale", making it move the same
            amount regardless of screen resolution
            </summary>
            <param name="gameObject"></param>
            <param name="translation"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.RemoveComponent``1(UnityEngine.GameObject)">
            <summary>
            Removes a Component from a GameObject by destroying it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.HasComponent``1(UnityEngine.GameObject)">
            <summary>
            Returns whether a component of the given type exists on a game object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.HasComponent``1(UnityEngine.GameObject,``0@)">
            <summary>
            Returns whether a component of the given type exists on a game object, and puts it in the out param
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Duplicate``1(``0)">
            <summary>
            Instantiate a clone of the GameObject keeping the same parent
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Duplicate``1(``0,UnityEngine.Transform)">
            <summary>
            Instantiate a clone of the GameObject with the new transform as parent 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.AddModHelperComponent``1(UnityEngine.GameObject,``0)">
            <summary>
            Adds the ModHelperComponent to a parent GameObject, returning the ModHelperComponent
            <br/>
            (This is an extension method just so that we can return the type generically)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.AddModHelperPanel(UnityEngine.GameObject,BTD_Mod_Helper.Api.Components.Info,System.String,System.Nullable{UnityEngine.RectTransform.Axis},System.Single,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddPanel(BTD_Mod_Helper.Api.Components.Info)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.AddModHelperScrollPanel(UnityEngine.GameObject,BTD_Mod_Helper.Api.Components.Info,System.Nullable{UnityEngine.RectTransform.Axis},System.String,System.Single,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.Components.ModHelperComponent.AddScrollPanel(BTD_Mod_Helper.Api.Components.Info)"/>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.DestroyAllChildren(UnityEngine.GameObject)">
            <summary>
            Destroys all children of a game object
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Exists``1(``0)">
            <summary>
            Used to null check unity objects without bypassing the lifecycle
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Exists``1(``0,``0@)">
            <summary>
            Used to null check unity objects without bypassing the lifecycle
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.InputFieldExt">
            <summary>
            Extensions for InputFields
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InputFieldExt.AddSubmitEvent(UnityEngine.UI.InputField,BTD_Mod_Helper.Extensions.InputFieldSubmitEvent.Function)">
            <summary>
            Add a submit event to an InputField
            </summary>\
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InputFieldExt.AddOnValueChangeEvent(UnityEngine.UI.InputField,BTD_Mod_Helper.Extensions.InputFieldOnValueChanged.Function)">
            <summary>
            Adds a value change event to an InputField
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InputFieldExt.AddOnValueChangedEvent(UnityEngine.UI.InputField,BTD_Mod_Helper.Extensions.InputFieldOnValueChanged.Function)">
            <summary>
            Adds a value changed event to an InputField
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.KeyCodeExt">
            <summary>
            Extension methods for keycodes
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.LayoutGroupExt">
            <summary>
            Extensions for LayoutGroups
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LayoutGroupExt.SetPadding(UnityEngine.UI.LayoutGroup,System.Int32)">
            <summary>
            Sets the padding on all sides of a panel to be a certain value
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.LocalizationManagerExt">
            <summary>
            Extension methods for the Localization Manager.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LocalizationManagerExt.GetTextTable(Il2CppNinjaKiwi.Common.LocalizationManager)">
            <summary>
            Returns the text table that is currently in use.
            </summary>
            <param name="localization"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SpriteExt">
            <summary>
            Extensions for Sprites
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpriteExt.SetTexture(UnityEngine.Sprite,UnityEngine.Texture2D)">
            <summary>
            Set this Sprite's texture
            </summary>
            <param name="sprite"></param>
            <param name="newTexture"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.SpriteReferenceExt">
            <summary>
            Extensions for SpriteReferences
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpriteReferenceExt.GetGUID(Il2CppAssets.Scripts.Utils.SpriteReference)">
            <summary>
            Returns's the GUID of this SpriteReference
            </summary>
            <param name="spriteReference"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Texture2DExt">
            <summary>
            Extensions for Texture2Ds
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateFromColor(UnityEngine.Texture2D,UnityEngine.Color)">
            <summary>
            Create Texture2D from a unity Color. Texture will only be this color
            </summary>
            <param name="texture2D"></param>
            <param name="color">Color to make new texture</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.SaveToPNG(UnityEngine.Texture2D,System.String)">
            <summary>
            Save Texture2D as a png to file.
            </summary>
            <param name="texture"></param>
            <param name="filePath">File path to save texture to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.TrySaveToPNG(UnityEngine.Texture,System.String)">
            <summary>
            Attempts to save a Texture to a png at the given filePath, even if it isn't marked as readable
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.LoadFromFile(UnityEngine.Texture2D,System.String)">
            <summary>
            Create Texture2D from a file on local PC
            </summary>
            <param name="texture"></param>
            <param name="filePath">path of file on PC</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateSpriteFromTexture(UnityEngine.Texture2D,System.Single)">
            <summary>
            Create a Sprite from this Texture2D
            </summary>
            <param name="texture2D"></param>
            <param name="pixelsPerUnit">Number of pixels you want in each unit. More pixels means bigger sprite in game</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateSpriteFromTexture(UnityEngine.Texture2D,System.Single,UnityEngine.Vector2)">
            <summary>
            Create a Sprite from this Texture2D
            </summary>
            <param name="texture2D"></param>
            <param name="pixelsPerUnit">Number of pixels you want in each unit. More pixels means bigger sprite in game</param>
            <param name="pivot"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ToggleExt">
            <summary>
            Extensions for Toggles
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ToggleExt.AddOnValueChanged(UnityEngine.UI.Toggle,BTD_Mod_Helper.Extensions.ToggleEventExt.Function)">
            <summary>
            Adds a function to this toggle
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt">
            <summary>
            Extensions for UnityDisplayNodes
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.Get3DModels(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Get all 3D models attached to this UnityDisplayNode. 
            </summary>
            <param name="unityDisplayNode"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetRenderer``1(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets the first generic renderer of the specified type, recalculating the renderers if need be
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="recalculate">Whether to recalculate renderers</param>
            <typeparam name="T">The type of Renderer you're looking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetRenderers(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets all generic renderers on this UnityDisplayNode, recalculating the renderers if need be
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="recalculate">Whether to recalculate renderers</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetRenderers``1(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets all generic renderers of the specified type, recalculating the renderers if need be
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="recalculate">Whether to recalculate renderers</param>
            <typeparam name="T">The type of Renderer you're looking for</typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetMeshRenderer(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Int32,System.Boolean)">
            <summary>
            Gets the first (or an indexed) SkinnedMeshRenderer/MeshRenderer
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <param name="recalculate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetMeshRenderers(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets all renderers that are of type SkinnedMeshRenderer or MeshRenderer
            </summary>
            <param name="node"></param>
            <param name="recalculate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.PrintInfo(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Prints relevant info about this node to the console
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.RemoveBone(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String,System.Boolean)">
            <summary>
            Removes (hides) a given bone
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetBone(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Gets the transform associated with the given bone
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.SaveMeshTexture(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.Int32,System.String)">
            <summary>
            Saves the texture used for this node's mesh renderer 
            <br/>
            By default, this saves to local files, aka "C:\Users\...\AppData\LocalLow\Ninja Kiwi\BloonsTD6"
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="index"></param>
            <param name="path">Optional path to save to instead</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.DumpTextures(Il2CppAssets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Dumps all textures for every renderer in the node
            </summary>
            <param name="node"></param>
            <param name="prefix"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.Vector3Ext">
            <summary>
            Extensions for Vectors
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Vector3Ext.ToSMathVector(UnityEngine.Vector3)">
            <summary>
            Convert UnityEngine.Vector3 to NinjaKiwi's SMath.Vector3
            </summary>
            <param name="vector3"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.Sim.UnityToSimulation_UpgradeTower_Impl">
            <summary>
            This is a pretty specific patch that addresses the following:
            <br/>
            In the default game, the tower id specified in an UpgradePathModel is ONLY used in the UpgradeScreen for w/e reason.
            For actually upgrading the tower, it ignores it and just tries to find the next tower by its base id and tier.
            This patch changes it so that it actually respects what tower is being asked for in the UpgradePathModel.
            <br/>
            This has no effect at all for vanilla towers, but allows modded towers to more easily do funky stuff with upgrades.
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.UI.HotkeysScreenField_UpdateUI">
            <summary>
            Ignore any exceptions coming from this method
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.UI.TowerSelectionMenu_UpgradeTower">
            <summary>
            This is a benign patch that helps fix unexpected issues with changing upgrade restrictions
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.UI.UpgradeScreen_Open">
            <summary>
            Stop the first object in the top upgrade row from being automatically selected, since it may not exist for modded towers
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.SteamWebView_OnGUI">
            <summary>
            Use a RawImage to render if available so that objects can be displayed on top of it
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.GUI_DrawTexture">
            <summary>
            Don't draw the SteamWebView on the entire screen when using the RawImage
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.Event_get_current">
            <summary>
            Block clicks to objects above the webview
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.HTML_URLChanged_t_OnResultWithInfo">
            <summary>
            Keep the CurrentUrl up to date
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.HtmlSurface_OnStartRequestAPI">
            <summary>
            Allow mod files to be downloaded through the browser
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.HtmlSurface_OnJSAlertAPI">
            <summary>
            Implement JS alerts using Ok popups
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.EmbeddedBrowser.HtmlSurface_OnJSConfirmAPI">
            <summary>
            Implement JS confirms using Ok/Cancel popups
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.MainMenuUI">
            <summary>
            Class to access the game's Main Menu UI
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetScene">
            <summary>
            Gets the Scene for the Main Menu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetCanvas">
            <summary>
            Gets the Canvas for the Main Menu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetMonkeysButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetHeroesButton">
            <summary>
            Gets the Heroes Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetPlayButton">
            <summary>
            Gets the Play Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetCoopButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetPowersButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetKnowledgeButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetSettingsButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetAchievementsButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetStoreButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetTrophyStoreButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetExitButton">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MainMenuUI.GetXpBarText">
            <summary>
            Gets the Monkeys Button if on the Main Menu, or null
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.MapSelectUI">
            <summary>
            Class to access the game's Map Select UI
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetScene">
            <summary>
            Gets the Scene if on the Map Select menu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetCanvas">
            <summary>
            Gets the Canvas for the MapSelectUI, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetBeginnerButton">
            <summary>
            Gets the Beginner Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetIntermediateButton">
            <summary>
            Gets the Intermediate Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetAdvancedButton">
            <summary>
            Gets the Advanced Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetExpertButton">
            <summary>
            Gets the Expert Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.MapSelectUI.GetExtremeButton">
            <summary>
            Gets the Extreme Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.BTD6.TitleScreenUI">
            <summary>
            Class to access the Title Screen UI
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.TitleScreenUI.GetScene">
            <summary>
            Gets the Scene if on the Title Screen menu
            </summary>=
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.TitleScreenUI.GetCanvas">
            <summary>
            Gets the Canvas for the TitleScreenUI, or null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.BTD6.TitleScreenUI.GetStartButton">
            <summary>
            Gets the Intermediate Button if on the Map Select Menu, or null
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.Menus.ModsMenu">
            <summary>
            The ModGameMenu for the screen showing current mods
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.Menus.ModsMenu.OnMenuOpened(Il2CppSystem.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.UI.Menus.ModsMenu.OnMenuClosed">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.UI.Menus.ModsMenu.OnMenuUpdate">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.UpdateTowerSet(Il2CppAssets.Scripts.Unity.UI_New.Main.MonkeySelect.MonkeySelectMenu,System.Int32)">
            <summary>
            Update the currentTowerSet tracker, and change the state if need be
            </summary>
            <param name="__instance"></param>
            <param name="offset"></param>
        </member>
        <member name="M:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.UpdateGameModel(Il2CppAssets.Scripts.Models.TowerSets.TowerSet)">
            <summary>
            Changes the order of the TowerDetails in the GameModel
            <br/>
            Their order in the GameModel is what determines their order in the screen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.ResetGameModel">
            <summary>
            Put the GameModel's TowerDetails ordering back to normal
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.Cycle(System.Int32)">
            <summary>
            Change the MonkeySelectButtons on the current page
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.RefreshButtons">
            <summary>
            Actually make the displayed buttons change
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.Modded.ModdedMonkeySelectMenu.MonkeySelectMenu_SwitchTowerSet">
            <summary>
            Possible inputs:
            <br/>
            towerSet=null swipeGesture=false (reOpening=false) - When opening the MonkeySelectMenu from the Main Menu
            <br/>
            towerSet=not null swipeGesture=true (reOpening=false) - When swiping or clicking the left/right buttons
            <br/>
            towerSet=not null swipeGesture=false (reOpening=false) - When clicking the MonkeyGroupButtons, also the initial call to Open()
            <br/>
            towerSet=not null swipeGesture=false (reOpening=true) - Called during our calls to Open() to change the buttons
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.UI.Modded.RoundSetChanger">
            <summary>
            Class controlling the in game Round Set override UI
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.UI.Modded.RoundSetChanger.RoundSetOverride">
            <summary>
            The round set override currently chosen, or null
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.BloonsMod">
            <summary>
            Expanded version of MelonMod to suit the needs of Bloons games and the Mod Helper
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.Content">
            <summary>
            All ModContent in ths mod
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.ModSettings">
            <summary>
            The settings in this mod organized by name
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.Resources">
            <summary>
            The embedded resources (textures) of this mod
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.AudioClips">
            <summary>
            Audio clips for the embedded sounds in this mod
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.IDPrefix">
            <summary>
            The prefix used for the IDs of towers, upgrades, etc for this mod to prevent conflicts with other mods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.CheatMod">
            <summary>
            Setting this to true will prevent your BloonsMod hooks from executing if the player could get flagged for using mods at that time.
            <br/> 
            For example, using mods in public co-op
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.ModSourcesPath">
            <summary>
            The path that this mod would most likely be at in the Mod Sources folder
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.GithubReleaseURL">
            <summary>
            <see href="https://github.com/gurrenm3/BTD-Mod-Helper/wiki/%5B3.0%5D-Appearing-in-the-Mod-Browser-%28ModHelperData%29"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.MelonInfoCsURL">
            <summary>
            <see href="https://github.com/gurrenm3/BTD-Mod-Helper/wiki/%5B3.0%5D-Appearing-in-the-Mod-Browser-%28ModHelperData%29"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.LatestURL">
            <summary>
            <see href="https://github.com/gurrenm3/BTD-Mod-Helper/wiki/%5B3.0%5D-Appearing-in-the-Mod-Browser-%28ModHelperData%29"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.Call(System.String,System.Object[])">
            <summary>
            Allows you to define ways for other mods to interact with this mod. Other mods could do:
            <code>
            ModHelper.GetMod("YourModName")?.Call("YourOperationName", ...);
            </code>
            to execute functionality here.
            <br/>
            </summary>
            <param name="operation">A string for the name of the operation that another mods wants to call</param>
            <param name="parameters">The parameters that another mod has provided</param>
            <returns>A possible result of this call</returns>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.AddContent(BTD_Mod_Helper.Api.ModContent)">
            <summary>
            Manually adds new ModContent to the mod. Does not directly call <see cref="M:BTD_Mod_Helper.Api.ModContent.Load"/> or
            <see cref="M:BTD_Mod_Helper.Api.ModContent.Register"/>, but the latter will still end up being called if this is added before the
            Registration phase.
            </summary>
            <param name="modContent"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.AddContent(System.Collections.Generic.IEnumerable{BTD_Mod_Helper.Api.ModContent})">
            <summary>
            Manually adds multiple new ModContent to the mod. Does not directly call <see cref="M:BTD_Mod_Helper.Api.ModContent.Load"/> or
            <see cref="M:BTD_Mod_Helper.Api.ModContent.Register"/>, but the latter will still end up being called if this is added before the
            Registration phase.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnModOptionsOpened">
            <summary>
            Called whenever the Mod Options Menu gets opened, after it finishes initializing
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.OptionalPatches">
            <summary>
            Signifies that the game shouldn't crash / the mod shouldn't stop loading if one of its patches fails
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.BloonsMod.modHelperPatchAll">
            <summary>
            Lets the ModHelper control patching, allowing for individual patches to fail without the entire mod getting
            unloaded. 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnEarlyInitializeMelon">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnInitializeMelon">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnApplicationStart">
            <inheritdoc cref="M:BTD_Mod_Helper.BloonsMod.OnInitializeMelon"/>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnEarlyInitialize">
            <inheritdoc cref="M:BTD_Mod_Helper.BloonsMod.OnEarlyInitializeMelon"/>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnInitialize">
            <inheritdoc cref="M:BTD_Mod_Helper.BloonsMod.OnInitializeMelon"/>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnSaveSettings(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when the settings for your mod are saved.
            </summary>
            <param name="settings">The json representation of the settings about to be saved</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnLoadSettings(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when the settings for your mod are loaded
            </summary>
            <param name="settings">The json representation of the settings that were just loaded</param>
        </member>
        <member name="T:BTD_Mod_Helper.ModHelper">
            <summary>
            Catch-all class for non-extension static methods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.ModHelperDirectory">
            <summary>
            Directory where the Mod Helper stores most of its extra info
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.DisabledModsDirectory">
            <summary>
            Directory for where disabled mods are stored
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.ModSourcesDirectory">
            <summary>
            The directory path on the user's system that's set as their Mod Sources folder
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.IsNet6">
            <summary>
            Gets whether this is running on net6 MelonLoader
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.Mods">
            <summary>
            Active mods that use ModHelper functionality
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.ModHelper.Melons">
            <summary>
            All active mods, whether they're Mod Helper or not
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.GetMod(System.String)">
            <summary>
            Gets a BloonsMod by its name, or returns null if none are loaded with that name
            <br/>
            In this case a mod's name is its Assembly Name, which is almost always the same as the file name, but for the
            Mod Helper due to compatibility reasons it is "BloonsTD6 Mod Helper" rather than "Btd6ModHelper"
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.GetMod``1">
            <summary>
            Gets the instance of a specific BloonsMod by its type
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.HasMod(System.String)">
            <summary>
            Returns whether a mod with the given name is installed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.HasMod(System.String,BTD_Mod_Helper.BloonsMod@)">
            <summary>
            Returns whether a mod with the given name is installed, and pass it to the out param if it is
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Log``1(System.Object)">
            <summary>
            Logs a message from the specified Mod's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Msg``1(System.Object)">
            <summary>
            Logs a message from the specified Mod's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Error``1(System.Object)">
            <summary>
            Logs an error from the specified Mod's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Warning``1(System.Object)">
            <summary>
            Logs a warning from the specified Mod's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Log(System.Object)">
            <summary>
            Logs a message from the Mod Helper's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Msg(System.Object)">
            <summary>
            Logs a message from the Mod Helper's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Error(System.Object)">
            <summary>
            Logs an error from the Mod Helper's LoggerInstance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.ModHelper.Warning(System.Object)">
            <summary>
            Logs a warning from the Mod Helper's LoggerInstance
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
